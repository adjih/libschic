   1
   2
   3
   4
   5
   6
   7 Internet Engineering Task Force (IETF)                        S. Deering
   8 Request for Comments: 8200                                       Retired
   9 STD: 86                                                        R. Hinden
  10 Obsoletes: 2460                                     Check Point Software
  11 Category: Standards Track                                      July 2017
  12 ISSN: 2070-1721
  13
  14
  15            Internet Protocol, Version 6 (IPv6) Specification
  16
  17 Abstract
  18
  19    This document specifies version 6 of the Internet Protocol (IPv6).
  20    It obsoletes RFC 2460.
  21
  22 Status of This Memo
  23
  24    This is an Internet Standards Track document.
  25
  26    This document is a product of the Internet Engineering Task Force
  27    (IETF).  It represents the consensus of the IETF community.  It has
  28    received public review and has been approved for publication by the
  29    Internet Engineering Steering Group (IESG).  Further information on
  30    Internet Standards is available in Section 2 of RFC 7841.
  31
  32    Information about the current status of this document, any errata,
  33    and how to provide feedback on it may be obtained at
  34    http://www.rfc-editor.org/info/rfc8200.
  35
  36
  37
  38
  39
  40
  41
  42
  43
  44
  45
  46
  47
  48
  49
  50
  51
  52
  53
  54
  63 Copyright Notice
  64
  65    Copyright (c) 2017 IETF Trust and the persons identified as the
  66    document authors.  All rights reserved.
  67
  68    This document is subject to BCP 78 and the IETF Trust's Legal
  69    Provisions Relating to IETF Documents
  70    (http://trustee.ietf.org/license-info) in effect on the date of
  71    publication of this document.  Please review these documents
  72    carefully, as they describe your rights and restrictions with respect
  73    to this document.  Code Components extracted from this document must
  74    include Simplified BSD License text as described in Section 4.e of
  75    the Trust Legal Provisions and are provided without warranty as
  76    described in the Simplified BSD License.
  77
  78    This document may contain material from IETF Documents or IETF
  79    Contributions published or made publicly available before November
  80    10, 2008.  The person(s) controlling the copyright in some of this
  81    material may not have granted the IETF Trust the right to allow
  82    modifications of such material outside the IETF Standards Process.
  83    Without obtaining an adequate license from the person(s) controlling
  84    the copyright in such materials, this document may not be modified
  85    outside the IETF Standards Process, and derivative works of it may
  86    not be created outside the IETF Standards Process, except to format
  87    it for publication as an RFC or to translate it into languages other
  88    than English.
  89
  90
  91
  92
  93
  94
  95
  96
  97
  98
  99
 100
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
 119 Table of Contents
 120
 121    1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
 122    2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5
 123    3.  IPv6 Header Format  . . . . . . . . . . . . . . . . . . . . .   6
 124    4.  IPv6 Extension Headers  . . . . . . . . . . . . . . . . . . .   7
 125      4.1.  Extension Header Order  . . . . . . . . . . . . . . . . .  10
 126      4.2.  Options . . . . . . . . . . . . . . . . . . . . . . . . .  11
 127      4.3.  Hop-by-Hop Options Header . . . . . . . . . . . . . . . .  13
 128      4.4.  Routing Header  . . . . . . . . . . . . . . . . . . . . .  14
 129      4.5.  Fragment Header . . . . . . . . . . . . . . . . . . . . .  15
 130      4.6.  Destination Options Header  . . . . . . . . . . . . . . .  23
 131      4.7.  No Next Header  . . . . . . . . . . . . . . . . . . . . .  24
 132      4.8.  Defining New Extension Headers and Options  . . . . . . .  24
 133    5.  Packet Size Issues  . . . . . . . . . . . . . . . . . . . . .  25
 134    6.  Flow Labels . . . . . . . . . . . . . . . . . . . . . . . . .  26
 135    7.  Traffic Classes . . . . . . . . . . . . . . . . . . . . . . .  26
 136    8.  Upper-Layer Protocol Issues . . . . . . . . . . . . . . . . .  27
 137      8.1.  Upper-Layer Checksums . . . . . . . . . . . . . . . . . .  27
 138      8.2.  Maximum Packet Lifetime . . . . . . . . . . . . . . . . .  28
 139      8.3.  Maximum Upper-Layer Payload Size  . . . . . . . . . . . .  29
 140      8.4.  Responding to Packets Carrying Routing Headers  . . . . .  29
 141    9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  29
 142    10. Security Considerations . . . . . . . . . . . . . . . . . . .  30
 143    11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  32
 144      11.1.  Normative References . . . . . . . . . . . . . . . . . .  32
 145      11.2.  Informative References . . . . . . . . . . . . . . . . .  33
 146    Appendix A.  Formatting Guidelines for Options  . . . . . . . . .  36
 147    Appendix B.  Changes Since RFC 2460 . . . . . . . . . . . . . . .  39
 148    Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  42
 149    Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  42
 150
 151
 152
 153
 154
 155
 156
 157
 158
 159
 160
 161
 162
 163
 164
 165
 166
 175 1.  Introduction
 176
 177    IP version 6 (IPv6) is a new version of the Internet Protocol (IP),
 178    designed as the successor to IP version 4 (IPv4) [RFC791].  The
 179    changes from IPv4 to IPv6 fall primarily into the following
 180    categories:
 181
 182       o  Expanded Addressing Capabilities
 183
 184          IPv6 increases the IP address size from 32 bits to 128 bits, to
 185          support more levels of addressing hierarchy, a much greater
 186          number of addressable nodes, and simpler autoconfiguration of
 187          addresses.  The scalability of multicast routing is improved by
 188          adding a "scope" field to multicast addresses.  And a new type
 189          of address called an "anycast address" is defined; it is used
 190          to send a packet to any one of a group of nodes.
 191
 192       o  Header Format Simplification
 193
 194          Some IPv4 header fields have been dropped or made optional, to
 195          reduce the common-case processing cost of packet handling and
 196          to limit the bandwidth cost of the IPv6 header.
 197
 198       o  Improved Support for Extensions and Options
 199
 200          Changes in the way IP header options are encoded allows for
 201          more efficient forwarding, less stringent limits on the length
 202          of options, and greater flexibility for introducing new options
 203          in the future.
 204
 205       o  Flow Labeling Capability
 206
 207          A new capability is added to enable the labeling of sequences
 208          of packets that the sender requests to be treated in the
 209          network as a single flow.
 210
 211       o  Authentication and Privacy Capabilities
 212
 213          Extensions to support authentication, data integrity, and
 214          (optional) data confidentiality are specified for IPv6.
 215
 216    This document specifies the basic IPv6 header and the initially
 217    defined IPv6 extension headers and options.  It also discusses packet
 218    size issues, the semantics of flow labels and traffic classes, and
 219    the effects of IPv6 on upper-layer protocols.  The format and
 220    semantics of IPv6 addresses are specified separately in [RFC4291].
 221    The IPv6 version of ICMP, which all IPv6 implementations are required
 222    to include, is specified in [RFC4443].
 231    The data transmission order for IPv6 is the same as for IPv4 as
 232    defined in Appendix B of [RFC791].
 233
 234    Note: As this document obsoletes [RFC2460], any document referenced
 235    in this document that includes pointers to RFC 2460 should be
 236    interpreted as referencing this document.
 237
 238 2.  Terminology
 239
 240    node         a device that implements IPv6.
 241
 242    router       a node that forwards IPv6 packets not explicitly
 243                 addressed to itself.  (See Note below.)
 244
 245    host         any node that is not a router.  (See Note below.)
 246
 247    upper layer  a protocol layer immediately above IPv6.  Examples are
 248                 transport protocols such as TCP and UDP, control
 249                 protocols such as ICMP, routing protocols such as OSPF,
 250                 and internet-layer or lower-layer protocols being
 251                 "tunneled" over (i.e., encapsulated in) IPv6 such as
 252                 Internetwork Packet Exchange (IPX), AppleTalk, or IPv6
 253                 itself.
 254
 255    link         a communication facility or medium over which nodes can
 256                 communicate at the link layer, i.e., the layer
 257                 immediately below IPv6.  Examples are Ethernets (simple
 258                 or bridged); PPP links; X.25, Frame Relay, or ATM
 259                 networks; and internet-layer or higher-layer "tunnels",
 260                 such as tunnels over IPv4 or IPv6 itself.
 261
 262    neighbors    nodes attached to the same link.
 263
 264    interface    a node's attachment to a link.
 265
 266    address      an IPv6-layer identifier for an interface or a set of
 267                 interfaces.
 268
 269    packet       an IPv6 header plus payload.
 270
 271    link MTU     the maximum transmission unit, i.e., maximum packet size
 272                 in octets, that can be conveyed over a link.
 273
 274    path MTU     the minimum link MTU of all the links in a path between
 275                 a source node and a destination node.
 276
 277
 278
 287    Note: it is possible for a device with multiple interfaces to be
 288    configured to forward non-self-destined packets arriving from some
 289    set (fewer than all) of its interfaces and to discard non-self-
 290    destined packets arriving from its other interfaces.  Such a device
 291    must obey the protocol requirements for routers when receiving
 292    packets from, and interacting with neighbors over, the former
 293    (forwarding) interfaces.  It must obey the protocol requirements for
 294    hosts when receiving packets from, and interacting with neighbors
 295    over, the latter (non-forwarding) interfaces.
 296
 297 3.  IPv6 Header Format
 298
 299    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 300    |Version| Traffic Class |           Flow Label                  |
 301    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 302    |         Payload Length        |  Next Header  |   Hop Limit   |
 303    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 304    |                                                               |
 305    +                                                               +
 306    |                                                               |
 307    +                         Source Address                        +
 308    |                                                               |
 309    +                                                               +
 310    |                                                               |
 311    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 312    |                                                               |
 313    +                                                               +
 314    |                                                               |
 315    +                      Destination Address                      +
 316    |                                                               |
 317    +                                                               +
 318    |                                                               |
 319    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 320
 321       Version             4-bit Internet Protocol version number = 6.
 322
 323       Traffic Class       8-bit Traffic Class field.  See Section 7.
 324
 325       Flow Label          20-bit flow label.  See Section 6.
 326
 327       Payload Length      16-bit unsigned integer.  Length of the IPv6
 328                           payload, i.e., the rest of the packet
 329                           following this IPv6 header, in octets.  (Note
 330                           that any extension headers (see Section 4)
 331                           present are considered part of the payload,
 332                           i.e., included in the length count.)
 333
 334
 343       Next Header         8-bit selector.  Identifies the type of header
 344                           immediately following the IPv6 header.  Uses
 345                           the same values as the IPv4 Protocol field
 346                           [IANA-PN].
 347
 348       Hop Limit           8-bit unsigned integer.  Decremented by 1 by
 349                           each node that forwards the packet.  When
 350                           forwarding, the packet is discarded if Hop
 351                           Limit was zero when received or is decremented
 352                           to zero.  A node that is the destination of a
 353                           packet should not discard a packet with Hop
 354                           Limit equal to zero; it should process the
 355                           packet normally.
 356
 357       Source Address      128-bit address of the originator of the
 358                           packet.  See [RFC4291].
 359
 360       Destination Address 128-bit address of the intended recipient of
 361                           the packet (possibly not the ultimate
 362                           recipient, if a Routing header is present).
 363                           See [RFC4291] and Section 4.4.
 364
 365 4.  IPv6 Extension Headers
 366
 367    In IPv6, optional internet-layer information is encoded in separate
 368    headers that may be placed between the IPv6 header and the upper-
 369    layer header in a packet.  There is a small number of such extension
 370    headers, each one identified by a distinct Next Header value.
 371
 372    Extension headers are numbered from IANA IP Protocol Numbers
 373    [IANA-PN], the same values used for IPv4 and IPv6.  When processing a
 374    sequence of Next Header values in a packet, the first one that is not
 375    an extension header [IANA-EH] indicates that the next item in the
 376    packet is the corresponding upper-layer header.  A special "No Next
 377    Header" value is used if there is no upper-layer header.
 378
 379
 380
 381
 382
 383
 384
 385
 386
 387
 388
 389
 390
 399    As illustrated in these examples, an IPv6 packet may carry zero, one,
 400    or more extension headers, each identified by the Next Header field
 401    of the preceding header:
 402
 403    +---------------+------------------------
 404    |  IPv6 header  | TCP header + data
 405    |               |
 406    | Next Header = |
 407    |      TCP      |
 408    +---------------+------------------------
 409
 410    +---------------+----------------+------------------------
 411    |  IPv6 header  | Routing header | TCP header + data
 412    |               |                |
 413    | Next Header = |  Next Header = |
 414    |    Routing    |      TCP       |
 415    +---------------+----------------+------------------------
 416
 417    +---------------+----------------+-----------------+-----------------
 418    |  IPv6 header  | Routing header | Fragment header | fragment of TCP
 419    |               |                |                 |  header + data
 420    | Next Header = |  Next Header = |  Next Header =  |
 421    |    Routing    |    Fragment    |       TCP       |
 422    +---------------+----------------+-----------------+-----------------
 423
 424    Extension headers (except for the Hop-by-Hop Options header) are not
 425    processed, inserted, or deleted by any node along a packet's delivery
 426    path, until the packet reaches the node (or each of the set of nodes,
 427    in the case of multicast) identified in the Destination Address field
 428    of the IPv6 header.
 429
 430    The Hop-by-Hop Options header is not inserted or deleted, but may be
 431    examined or processed by any node along a packet's delivery path,
 432    until the packet reaches the node (or each of the set of nodes, in
 433    the case of multicast) identified in the Destination Address field of
 434    the IPv6 header.  The Hop-by-Hop Options header, when present, must
 435    immediately follow the IPv6 header.  Its presence is indicated by the
 436    value zero in the Next Header field of the IPv6 header.
 437
 438    NOTE: While [RFC2460] required that all nodes must examine and
 439    process the Hop-by-Hop Options header, it is now expected that nodes
 440    along a packet's delivery path only examine and process the
 441    Hop-by-Hop Options header if explicitly configured to do so.
 442
 443
 444
 445
 446
 455    At the destination node, normal demultiplexing on the Next Header
 456    field of the IPv6 header invokes the module to process the first
 457    extension header, or the upper-layer header if no extension header is
 458    present.  The contents and semantics of each extension header
 459    determine whether or not to proceed to the next header.  Therefore,
 460    extension headers must be processed strictly in the order they appear
 461    in the packet; a receiver must not, for example, scan through a
 462    packet looking for a particular kind of extension header and process
 463    that header prior to processing all preceding ones.
 464
 465    If, as a result of processing a header, the destination node is
 466    required to proceed to the next header but the Next Header value in
 467    the current header is unrecognized by the node, it should discard the
 468    packet and send an ICMP Parameter Problem message to the source of
 469    the packet, with an ICMP Code value of 1 ("unrecognized Next Header
 470    type encountered") and the ICMP Pointer field containing the offset
 471    of the unrecognized value within the original packet.  The same
 472    action should be taken if a node encounters a Next Header value of
 473    zero in any header other than an IPv6 header.
 474
 475    Each extension header is an integer multiple of 8 octets long, in
 476    order to retain 8-octet alignment for subsequent headers.  Multi-
 477    octet fields within each extension header are aligned on their
 478    natural boundaries, i.e., fields of width n octets are placed at an
 479    integer multiple of n octets from the start of the header, for n = 1,
 480    2, 4, or 8.
 481
 482    A full implementation of IPv6 includes implementation of the
 483    following extension headers:
 484
 485       Hop-by-Hop Options
 486       Fragment
 487       Destination Options
 488       Routing
 489       Authentication
 490       Encapsulating Security Payload
 491
 492    The first four are specified in this document; the last two are
 493    specified in [RFC4302] and [RFC4303], respectively.  The current list
 494    of IPv6 extension headers can be found at [IANA-EH].
 495
 496
 497
 498
 499
 500
 501
 502
 511 4.1.  Extension Header Order
 512
 513    When more than one extension header is used in the same packet, it is
 514    recommended that those headers appear in the following order:
 515
 516       IPv6 header
 517       Hop-by-Hop Options header
 518       Destination Options header (note 1)
 519       Routing header
 520       Fragment header
 521       Authentication header (note 2)
 522       Encapsulating Security Payload header (note 2)
 523       Destination Options header (note 3)
 524       Upper-Layer header
 525
 526       note 1: for options to be processed by the first destination that
 527               appears in the IPv6 Destination Address field plus
 528               subsequent destinations listed in the Routing header.
 529
 530       note 2: additional recommendations regarding the relative order of
 531               the Authentication and Encapsulating Security Payload
 532               headers are given in [RFC4303].
 533
 534       note 3: for options to be processed only by the final destination
 535               of the packet.
 536
 537    Each extension header should occur at most once, except for the
 538    Destination Options header, which should occur at most twice (once
 539    before a Routing header and once before the upper-layer header).
 540
 541    If the upper-layer header is another IPv6 header (in the case of IPv6
 542    being tunneled over or encapsulated in IPv6), it may be followed by
 543    its own extension headers, which are separately subject to the same
 544    ordering recommendations.
 545
 546    If and when other extension headers are defined, their ordering
 547    constraints relative to the above listed headers must be specified.
 548
 549    IPv6 nodes must accept and attempt to process extension headers in
 550    any order and occurring any number of times in the same packet,
 551    except for the Hop-by-Hop Options header, which is restricted to
 552    appear immediately after an IPv6 header only.  Nonetheless, it is
 553    strongly advised that sources of IPv6 packets adhere to the above
 554    recommended order until and unless subsequent specifications revise
 555    that recommendation.
 556
 557
 558
 567 4.2.  Options
 568
 569    Two of the currently defined extension headers specified in this
 570    document -- the Hop-by-Hop Options header and the Destination Options
 571    header -- carry a variable number of "options" that are type-length-
 572    value (TLV) encoded in the following format:
 573
 574       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
 575       |  Option Type  |  Opt Data Len |  Option Data
 576       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
 577
 578       Option Type         8-bit identifier of the type of option.
 579
 580       Opt Data Len        8-bit unsigned integer.  Length of the Option
 581                           Data field of this option, in octets.
 582
 583       Option Data         Variable-length field.  Option-Type-specific
 584                           data.
 585
 586    The sequence of options within a header must be processed strictly in
 587    the order they appear in the header; a receiver must not, for
 588    example, scan through the header looking for a particular kind of
 589    option and process that option prior to processing all preceding
 590    ones.
 591
 592    The Option Type identifiers are internally encoded such that their
 593    highest-order 2 bits specify the action that must be taken if the
 594    processing IPv6 node does not recognize the Option Type:
 595
 596       00 - skip over this option and continue processing the header.
 597
 598       01 - discard the packet.
 599
 600       10 - discard the packet and, regardless of whether or not the
 601            packet's Destination Address was a multicast address, send an
 602            ICMP Parameter Problem, Code 2, message to the packet's
 603            Source Address, pointing to the unrecognized Option Type.
 604
 605       11 - discard the packet and, only if the packet's Destination
 606            Address was not a multicast address, send an ICMP Parameter
 607            Problem, Code 2, message to the packet's Source Address,
 608            pointing to the unrecognized Option Type.
 609
 610    The third-highest-order bit of the Option Type specifies whether or
 611    not the Option Data of that option can change en route to the
 612    packet's final destination.  When an Authentication header is present
 613
 614
 623    in the packet, for any option whose data may change en route, its
 624    entire Option Data field must be treated as zero-valued octets when
 625    computing or verifying the packet's authenticating value.
 626
 627        0 - Option Data does not change en route
 628
 629        1 - Option Data may change en route
 630
 631    The three high-order bits described above are to be treated as part
 632    of the Option Type, not independent of the Option Type.  That is, a
 633    particular option is identified by a full 8-bit Option Type, not just
 634    the low-order 5 bits of an Option Type.
 635
 636    The same Option Type numbering space is used for both the Hop-by-Hop
 637    Options header and the Destination Options header.  However, the
 638    specification of a particular option may restrict its use to only one
 639    of those two headers.
 640
 641    Individual options may have specific alignment requirements, to
 642    ensure that multi-octet values within Option Data fields fall on
 643    natural boundaries.  The alignment requirement of an option is
 644    specified using the notation xn+y, meaning the Option Type must
 645    appear at an integer multiple of x octets from the start of the
 646    header, plus y octets.  For example:
 647
 648       2n     means any 2-octet offset from the start of the header.
 649       8n+2   means any 8-octet offset from the start of the header, plus
 650              2 octets.
 651
 652    There are two padding options that are used when necessary to align
 653    subsequent options and to pad out the containing header to a multiple
 654    of 8 octets in length.  These padding options must be recognized by
 655    all IPv6 implementations:
 656
 657    Pad1 option (alignment requirement: none)
 658
 659       +-+-+-+-+-+-+-+-+
 660       |       0       |
 661       +-+-+-+-+-+-+-+-+
 662
 663       NOTE! the format of the Pad1 option is a special case -- it does
 664             not have length and value fields.
 665
 666       The Pad1 option is used to insert 1 octet of padding into the
 667       Options area of a header.  If more than one octet of padding is
 668       required, the PadN option, described next, should be used, rather
 669       than multiple Pad1 options.
 670
 679    PadN option (alignment requirement: none)
 680
 681       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
 682       |       1       |  Opt Data Len |  Option Data
 683       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
 684
 685       The PadN option is used to insert two or more octets of padding
 686       into the Options area of a header.  For N octets of padding, the
 687       Opt Data Len field contains the value N-2, and the Option Data
 688       consists of N-2 zero-valued octets.
 689
 690    Appendix A contains formatting guidelines for designing new options.
 691
 692 4.3.  Hop-by-Hop Options Header
 693
 694    The Hop-by-Hop Options header is used to carry optional information
 695    that may be examined and processed by every node along a packet's
 696    delivery path.  The Hop-by-Hop Options header is identified by a Next
 697    Header value of 0 in the IPv6 header and has the following format:
 698
 699     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 700     |  Next Header  |  Hdr Ext Len  |                               |
 701     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
 702     |                                                               |
 703     .                                                               .
 704     .                            Options                            .
 705     .                                                               .
 706     |                                                               |
 707     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 708
 709
 710       Next Header         8-bit selector.  Identifies the type of header
 711                           immediately following the Hop-by-Hop Options
 712                           header.  Uses the same values as the IPv4
 713                           Protocol field [IANA-PN].
 714
 715       Hdr Ext Len         8-bit unsigned integer.  Length of the
 716                           Hop-by-Hop Options header in 8-octet units,
 717                           not including the first 8 octets.
 718
 719       Options             Variable-length field, of length such that the
 720                           complete Hop-by-Hop Options header is an
 721                           integer multiple of 8 octets long.  Contains
 722                           one or more TLV-encoded options, as described
 723                           in Section 4.2.
 724
 725    The only hop-by-hop options defined in this document are the Pad1 and
 726    PadN options specified in Section 4.2.
 735 4.4.  Routing Header
 736
 737    The Routing header is used by an IPv6 source to list one or more
 738    intermediate nodes to be "visited" on the way to a packet's
 739    destination.  This function is very similar to IPv4's Loose Source
 740    and Record Route option.  The Routing header is identified by a Next
 741    Header value of 43 in the immediately preceding header and has the
 742    following format:
 743
 744     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 745     |  Next Header  |  Hdr Ext Len  |  Routing Type | Segments Left |
 746     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 747     |                                                               |
 748     .                                                               .
 749     .                       type-specific data                      .
 750     .                                                               .
 751     |                                                               |
 752     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 753
 754       Next Header         8-bit selector.  Identifies the type of header
 755                           immediately following the Routing header.
 756                           Uses the same values as the IPv4 Protocol
 757                           field [IANA-PN].
 758
 759       Hdr Ext Len         8-bit unsigned integer.  Length of the Routing
 760                           header in 8-octet units, not including the
 761                           first 8 octets.
 762
 763       Routing Type        8-bit identifier of a particular Routing
 764                           header variant.
 765
 766       Segments Left       8-bit unsigned integer.  Number of route
 767                           segments remaining, i.e., number of explicitly
 768                           listed intermediate nodes still to be visited
 769                           before reaching the final destination.
 770
 771       type-specific data  Variable-length field, of format determined by
 772                           the Routing Type, and of length such that the
 773                           complete Routing header is an integer multiple
 774                           of 8 octets long.
 775
 776
 777
 778
 779
 780
 781
 782
 791    If, while processing a received packet, a node encounters a Routing
 792    header with an unrecognized Routing Type value, the required behavior
 793    of the node depends on the value of the Segments Left field, as
 794    follows:
 795
 796       If Segments Left is zero, the node must ignore the Routing header
 797       and proceed to process the next header in the packet, whose type
 798       is identified by the Next Header field in the Routing header.
 799
 800       If Segments Left is non-zero, the node must discard the packet and
 801       send an ICMP Parameter Problem, Code 0, message to the packet's
 802       Source Address, pointing to the unrecognized Routing Type.
 803
 804    If, after processing a Routing header of a received packet, an
 805    intermediate node determines that the packet is to be forwarded onto
 806    a link whose link MTU is less than the size of the packet, the node
 807    must discard the packet and send an ICMP Packet Too Big message to
 808    the packet's Source Address.
 809
 810    The currently defined IPv6 Routing Headers and their status can be
 811    found at [IANA-RH].  Allocation guidelines for IPv6 Routing Headers
 812    can be found in [RFC5871].
 813
 814 4.5.  Fragment Header
 815
 816    The Fragment header is used by an IPv6 source to send a packet larger
 817    than would fit in the path MTU to its destination.  (Note: unlike
 818    IPv4, fragmentation in IPv6 is performed only by source nodes, not by
 819    routers along a packet's delivery path -- see Section 5.)  The
 820    Fragment header is identified by a Next Header value of 44 in the
 821    immediately preceding header and has the following format:
 822
 823    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 824    |  Next Header  |   Reserved    |      Fragment Offset    |Res|M|
 825    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 826    |                         Identification                        |
 827    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 828
 829       Next Header         8-bit selector.  Identifies the initial header
 830                           type of the Fragmentable Part of the original
 831                           packet (defined below).  Uses the same values
 832                           as the IPv4 Protocol field [IANA-PN].
 833
 834       Reserved            8-bit reserved field.  Initialized to zero for
 835                           transmission; ignored on reception.
 836
 837
 838
 847       Fragment Offset     13-bit unsigned integer.  The offset, in
 848                           8-octet units, of the data following this
 849                           header, relative to the start of the
 850                           Fragmentable Part of the original packet.
 851
 852       Res                 2-bit reserved field.  Initialized to zero for
 853                           transmission; ignored on reception.
 854
 855       M flag              1 = more fragments; 0 = last fragment.
 856
 857       Identification      32 bits.  See description below.
 858
 859    In order to send a packet that is too large to fit in the MTU of the
 860    path to its destination, a source node may divide the packet into
 861    fragments and send each fragment as a separate packet, to be
 862    reassembled at the receiver.
 863
 864    For every packet that is to be fragmented, the source node generates
 865    an Identification value.  The Identification must be different than
 866    that of any other fragmented packet sent recently* with the same
 867    Source Address and Destination Address.  If a Routing header is
 868    present, the Destination Address of concern is that of the final
 869    destination.
 870
 871       *  "recently" means within the maximum likely lifetime of a
 872          packet, including transit time from source to destination and
 873          time spent awaiting reassembly with other fragments of the same
 874          packet.  However, it is not required that a source node knows
 875          the maximum packet lifetime.  Rather, it is assumed that the
 876          requirement can be met by implementing an algorithm that
 877          results in a low identification reuse frequency.  Examples of
 878          algorithms that can meet this requirement are described in
 879          [RFC7739].
 880
 881
 882
 883
 884
 885
 886
 887
 888
 889
 890
 891
 892
 893
 894
 903    The initial, large, unfragmented packet is referred to as the
 904    "original packet", and it is considered to consist of three parts, as
 905    illustrated:
 906
 907    original packet:
 908
 909    +------------------+-------------------------+---//----------------+
 910    |  Per-Fragment    | Extension & Upper-Layer |   Fragmentable      |
 911    |    Headers       |       Headers           |      Part           |
 912    +------------------+-------------------------+---//----------------+
 913
 914       The Per-Fragment headers must consist of the IPv6 header plus any
 915       extension headers that must be processed by nodes en route to the
 916       destination, that is, all headers up to and including the Routing
 917       header if present, else the Hop-by-Hop Options header if present,
 918       else no extension headers.
 919
 920       The Extension headers are all other extension headers that are not
 921       included in the Per-Fragment headers part of the packet.  For this
 922       purpose, the Encapsulating Security Payload (ESP) is not
 923       considered an extension header.  The Upper-Layer header is the
 924       first upper-layer header that is not an IPv6 extension header.
 925       Examples of upper-layer headers include TCP, UDP, IPv4, IPv6,
 926       ICMPv6, and as noted ESP.
 927
 928       The Fragmentable Part consists of the rest of the packet after the
 929       upper-layer header or after any header (i.e., initial IPv6 header
 930       or extension header) that contains a Next Header value of No Next
 931       Header.
 932
 933    The Fragmentable Part of the original packet is divided into
 934    fragments.  The lengths of the fragments must be chosen such that the
 935    resulting fragment packets fit within the MTU of the path to the
 936    packet's destination(s).  Each complete fragment, except possibly the
 937    last ("rightmost") one, is an integer multiple of 8 octets long.
 938
 939
 940
 941
 942
 943
 944
 945
 946
 947
 948
 949
 950
 959    The fragments are transmitted in separate "fragment packets" as
 960    illustrated:
 961
 962    original packet:
 963
 964    +-----------------+-----------------+--------+--------+-//-+--------+
 965    |  Per-Fragment   |Ext & Upper-Layer|  first | second |    |  last  |
 966    |    Headers      |    Headers      |fragment|fragment|....|fragment|
 967    +-----------------+-----------------+--------+--------+-//-+--------+
 968
 969    fragment packets:
 970
 971    +------------------+---------+-------------------+----------+
 972    |  Per-Fragment    |Fragment | Ext & Upper-Layer |  first   |
 973    |    Headers       | Header  |   Headers         | fragment |
 974    +------------------+---------+-------------------+----------+
 975
 976    +------------------+--------+-------------------------------+
 977    |  Per-Fragment    |Fragment|    second                     |
 978    |    Headers       | Header |   fragment                    |
 979    +------------------+--------+-------------------------------+
 980                          o
 981                          o
 982                          o
 983    +------------------+--------+----------+
 984    |  Per-Fragment    |Fragment|   last   |
 985    |    Headers       | Header | fragment |
 986    +------------------+--------+----------+
 987
 988    The first fragment packet is composed of:
 989
 990       (1)  The Per-Fragment headers of the original packet, with the
 991            Payload Length of the original IPv6 header changed to contain
 992            the length of this fragment packet only (excluding the length
 993            of the IPv6 header itself), and the Next Header field of the
 994            last header of the Per-Fragment headers changed to 44.
 995
 996       (2)  A Fragment header containing:
 997
 998               The Next Header value that identifies the first header
 999               after the Per-Fragment headers of the original packet.
1000
1001               A Fragment Offset containing the offset of the fragment,
1002               in 8-octet units, relative to the start of the
1003               Fragmentable Part of the original packet.  The Fragment
1004               Offset of the first ("leftmost") fragment is 0.
1005
1006               An M flag value of 1 as this is the first fragment.
1015               The Identification value generated for the original
1016               packet.
1017
1018       (3)  Extension headers, if any, and the Upper-Layer header.  These
1019            headers must be in the first fragment.  Note: This restricts
1020            the size of the headers through the Upper-Layer header to the
1021            MTU of the path to the packet's destinations(s).
1022
1023       (4)  The first fragment.
1024
1025    The subsequent fragment packets are composed of:
1026
1027       (1)  The Per-Fragment headers of the original packet, with the
1028            Payload Length of the original IPv6 header changed to contain
1029            the length of this fragment packet only (excluding the length
1030            of the IPv6 header itself), and the Next Header field of the
1031            last header of the Per-Fragment headers changed to 44.
1032
1033       (2)  A Fragment header containing:
1034
1035               The Next Header value that identifies the first header
1036               after the Per-Fragment headers of the original packet.
1037
1038               A Fragment Offset containing the offset of the fragment,
1039               in 8-octet units, relative to the start of the
1040               Fragmentable Part of the original packet.
1041
1042               An M flag value of 0 if the fragment is the last
1043               ("rightmost") one, else an M flag value of 1.
1044
1045               The Identification value generated for the original
1046               packet.
1047
1048       (3)  The fragment itself.
1049
1050    Fragments must not be created that overlap with any other fragments
1051    created from the original packet.
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1071    At the destination, fragment packets are reassembled into their
1072    original, unfragmented form, as illustrated:
1073
1074    reassembled original packet:
1075
1076    +---------------+-----------------+---------+--------+-//--+--------+
1077    | Per-Fragment  |Ext & Upper-Layer|  first  | second |     | last   |
1078    |    Headers    |     Headers     |frag data|fragment|.....|fragment|
1079    +---------------+-----------------+---------+--------+-//--+--------+
1080
1081    The following rules govern reassembly:
1082
1083       An original packet is reassembled only from fragment packets that
1084       have the same Source Address, Destination Address, and Fragment
1085       Identification.
1086
1087       The Per-Fragment headers of the reassembled packet consists of all
1088       headers up to, but not including, the Fragment header of the first
1089       fragment packet (that is, the packet whose Fragment Offset is
1090       zero), with the following two changes:
1091
1092          The Next Header field of the last header of the Per-Fragment
1093          headers is obtained from the Next Header field of the first
1094          fragment's Fragment header.
1095
1096          The Payload Length of the reassembled packet is computed from
1097          the length of the Per-Fragment headers and the length and
1098          offset of the last fragment.  For example, a formula for
1099          computing the Payload Length of the reassembled original packet
1100          is:
1101
1102             PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last
1103
1104             where
1105             PL.orig  =  Payload Length field of reassembled packet.
1106             PL.first =  Payload Length field of first fragment packet.
1107             FL.first =  length of fragment following Fragment header of
1108                         first fragment packet.
1109             FO.last  =  Fragment Offset field of Fragment header of last
1110                         fragment packet.
1111             FL.last  =  length of fragment following Fragment header of
1112                         last fragment packet.
1113
1114          The Fragmentable Part of the reassembled packet is constructed
1115          from the fragments following the Fragment headers in each of
1116          the fragment packets.  The length of each fragment is computed
1117          by subtracting from the packet's Payload Length the length of
1118          the headers between the IPv6 header and fragment itself; its
1127          relative position in Fragmentable Part is computed from its
1128          Fragment Offset value.
1129
1130          The Fragment header is not present in the final, reassembled
1131          packet.
1132
1133          If the fragment is a whole datagram (that is, both the Fragment
1134          Offset field and the M flag are zero), then it does not need
1135          any further reassembly and should be processed as a fully
1136          reassembled packet (i.e., updating Next Header, adjust Payload
1137          Length, removing the Fragment header, etc.).  Any other
1138          fragments that match this packet (i.e., the same IPv6 Source
1139          Address, IPv6 Destination Address, and Fragment Identification)
1140          should be processed independently.
1141
1142    The following error conditions may arise when reassembling fragmented
1143    packets:
1144
1145       o  If insufficient fragments are received to complete reassembly
1146          of a packet within 60 seconds of the reception of the first-
1147          arriving fragment of that packet, reassembly of that packet
1148          must be abandoned and all the fragments that have been received
1149          for that packet must be discarded.  If the first fragment
1150          (i.e., the one with a Fragment Offset of zero) has been
1151          received, an ICMP Time Exceeded -- Fragment Reassembly Time
1152          Exceeded message should be sent to the source of that fragment.
1153
1154       o  If the length of a fragment, as derived from the fragment
1155          packet's Payload Length field, is not a multiple of 8 octets
1156          and the M flag of that fragment is 1, then that fragment must
1157          be discarded and an ICMP Parameter Problem, Code 0, message
1158          should be sent to the source of the fragment, pointing to the
1159          Payload Length field of the fragment packet.
1160
1161       o  If the length and offset of a fragment are such that the
1162          Payload Length of the packet reassembled from that fragment
1163          would exceed 65,535 octets, then that fragment must be
1164          discarded and an ICMP Parameter Problem, Code 0, message should
1165          be sent to the source of the fragment, pointing to the Fragment
1166          Offset field of the fragment packet.
1167
1168       o  If the first fragment does not include all headers through an
1169          Upper-Layer header, then that fragment should be discarded and
1170          an ICMP Parameter Problem, Code 3, message should be sent to
1171          the source of the fragment, with the Pointer field set to zero.
1172
1173
1174
1183       o  If any of the fragments being reassembled overlap with any
1184          other fragments being reassembled for the same packet,
1185          reassembly of that packet must be abandoned and all the
1186          fragments that have been received for that packet must be
1187          discarded, and no ICMP error messages should be sent.
1188
1189          It should be noted that fragments may be duplicated in the
1190          network.  Instead of treating these exact duplicate fragments
1191          as overlapping fragments, an implementation may choose to
1192          detect this case and drop exact duplicate fragments while
1193          keeping the other fragments belonging to the same packet.
1194
1195    The following conditions are not expected to occur frequently but are
1196    not considered errors if they do:
1197
1198       The number and content of the headers preceding the Fragment
1199       header of different fragments of the same original packet may
1200       differ.  Whatever headers are present, preceding the Fragment
1201       header in each fragment packet, are processed when the packets
1202       arrive, prior to queueing the fragments for reassembly.  Only
1203       those headers in the Offset zero fragment packet are retained in
1204       the reassembled packet.
1205
1206       The Next Header values in the Fragment headers of different
1207       fragments of the same original packet may differ.  Only the value
1208       from the Offset zero fragment packet is used for reassembly.
1209
1210       Other fields in the IPv6 header may also vary across the fragments
1211       being reassembled.  Specifications that use these fields may
1212       provide additional instructions if the basic mechanism of using
1213       the values from the Offset zero fragment is not sufficient.  For
1214       example, Section 5.3 of [RFC3168] describes how to combine the
1215       Explicit Congestion Notification (ECN) bits from different
1216       fragments to derive the ECN bits of the reassembled packet.
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1239 4.6.  Destination Options Header
1240
1241    The Destination Options header is used to carry optional information
1242    that need be examined only by a packet's destination node(s).  The
1243    Destination Options header is identified by a Next Header value of 60
1244    in the immediately preceding header and has the following format:
1245
1246     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1247     |  Next Header  |  Hdr Ext Len  |                               |
1248     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
1249     |                                                               |
1250     .                                                               .
1251     .                            Options                            .
1252     .                                                               .
1253     |                                                               |
1254     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1255
1256       Next Header         8-bit selector.  Identifies the type of header
1257                           immediately following the Destination Options
1258                           header.  Uses the same values as the IPv4
1259                           Protocol field [IANA-PN].
1260
1261       Hdr Ext Len         8-bit unsigned integer.  Length of the
1262                           Destination Options header in 8-octet units,
1263                           not including the first 8 octets.
1264
1265       Options             Variable-length field, of length such that the
1266                           complete Destination Options header is an
1267                           integer multiple of 8 octets long.  Contains
1268                           one or more TLV-encoded options, as described
1269                           in Section 4.2.
1270
1271    The only destination options defined in this document are the Pad1
1272    and PadN options specified in Section 4.2.
1273
1274    Note that there are two possible ways to encode optional destination
1275    information in an IPv6 packet: either as an option in the Destination
1276    Options header or as a separate extension header.  The Fragment
1277    header and the Authentication header are examples of the latter
1278    approach.  Which approach can be used depends on what action is
1279    desired of a destination node that does not understand the optional
1280    information:
1281
1282       o  If the desired action is for the destination node to discard
1283          the packet and, only if the packet's Destination Address is not
1284          a multicast address, send an ICMP Unrecognized Type message to
1285          the packet's Source Address, then the information may be
1286          encoded either as a separate header or as an option in the
1295          Destination Options header whose Option Type has the value 11
1296          in its highest-order 2 bits.  The choice may depend on such
1297          factors as which takes fewer octets, or which yields better
1298          alignment or more efficient parsing.
1299
1300       o  If any other action is desired, the information must be encoded
1301          as an option in the Destination Options header whose Option
1302          Type has the value 00, 01, or 10 in its highest-order 2 bits,
1303          specifying the desired action (see Section 4.2).
1304
1305 4.7.  No Next Header
1306
1307    The value 59 in the Next Header field of an IPv6 header or any
1308    extension header indicates that there is nothing following that
1309    header.  If the Payload Length field of the IPv6 header indicates the
1310    presence of octets past the end of a header whose Next Header field
1311    contains 59, those octets must be ignored and passed on unchanged if
1312    the packet is forwarded.
1313
1314 4.8.  Defining New Extension Headers and Options
1315
1316    Defining new IPv6 extension headers is not recommended, unless there
1317    are no existing IPv6 extension headers that can be used by specifying
1318    a new option for that IPv6 extension header.  A proposal to specify a
1319    new IPv6 extension header must include a detailed technical
1320    explanation of why an existing IPv6 extension header can not be used
1321    for the desired new function.  See [RFC6564] for additional
1322    background information.
1323
1324    Note: New extension headers that require hop-by-hop behavior must not
1325    be defined because, as specified in Section 4 of this document, the
1326    only extension header that has hop-by-hop behavior is the Hop-by-Hop
1327    Options header.
1328
1329    New hop-by-hop options are not recommended because nodes may be
1330    configured to ignore the Hop-by-Hop Options header, drop packets
1331    containing a Hop-by-Hop Options header, or assign packets containing
1332    a Hop-by-Hop Options header to a slow processing path.  Designers
1333    considering defining new hop-by-hop options need to be aware of this
1334    likely behavior.  There has to be a very clear justification why any
1335    new hop-by-hop option is needed before it is standardized.
1336
1337    Instead of defining new extension headers, it is recommended that the
1338    Destination Options header is used to carry optional information that
1339    must be examined only by a packet's destination node(s), because they
1340    provide better handling and backward compatibility.
1341
1342
1351    If new extension headers are defined, they need to use the following
1352    format:
1353
1354     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1355     |  Next Header  |  Hdr Ext Len  |                               |
1356     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
1357     |                                                               |
1358     .                                                               .
1359     .                  Header-Specific Data                         .
1360     .                                                               .
1361     |                                                               |
1362     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1363
1364       Next Header           8-bit selector.  Identifies the type of
1365                             header immediately following the extension
1366                             header.  Uses the same values as the IPv4
1367                             Protocol field [IANA-PN].
1368
1369       Hdr Ext Len           8-bit unsigned integer.  Length of the
1370                             Destination Options header in 8-octet units,
1371                             not including the first 8 octets.
1372
1373       Header Specific Data  Variable-length field.  Fields specific to
1374                             the extension header.
1375
1376 5.  Packet Size Issues
1377
1378    IPv6 requires that every link in the Internet have an MTU of 1280
1379    octets or greater.  This is known as the IPv6 minimum link MTU.  On
1380    any link that cannot convey a 1280-octet packet in one piece, link-
1381    specific fragmentation and reassembly must be provided at a layer
1382    below IPv6.
1383
1384    Links that have a configurable MTU (for example, PPP links [RFC1661])
1385    must be configured to have an MTU of at least 1280 octets; it is
1386    recommended that they be configured with an MTU of 1500 octets or
1387    greater, to accommodate possible encapsulations (i.e., tunneling)
1388    without incurring IPv6-layer fragmentation.
1389
1390    From each link to which a node is directly attached, the node must be
1391    able to accept packets as large as that link's MTU.
1392
1393    It is strongly recommended that IPv6 nodes implement Path MTU
1394    Discovery [RFC8201], in order to discover and take advantage of path
1395    MTUs greater than 1280 octets.  However, a minimal IPv6
1396    implementation (e.g., in a boot ROM) may simply restrict itself to
1397    sending packets no larger than 1280 octets, and omit implementation
1398    of Path MTU Discovery.
1407    In order to send a packet larger than a path's MTU, a node may use
1408    the IPv6 Fragment header to fragment the packet at the source and
1409    have it reassembled at the destination(s).  However, the use of such
1410    fragmentation is discouraged in any application that is able to
1411    adjust its packets to fit the measured path MTU (i.e., down to 1280
1412    octets).
1413
1414    A node must be able to accept a fragmented packet that, after
1415    reassembly, is as large as 1500 octets.  A node is permitted to
1416    accept fragmented packets that reassemble to more than 1500 octets.
1417    An upper-layer protocol or application that depends on IPv6
1418    fragmentation to send packets larger than the MTU of a path should
1419    not send packets larger than 1500 octets unless it has assurance that
1420    the destination is capable of reassembling packets of that larger
1421    size.
1422
1423 6.  Flow Labels
1424
1425    The 20-bit Flow Label field in the IPv6 header is used by a source to
1426    label sequences of packets to be treated in the network as a single
1427    flow.
1428
1429    The current definition of the IPv6 Flow Label can be found in
1430    [RFC6437].
1431
1432 7.  Traffic Classes
1433
1434    The 8-bit Traffic Class field in the IPv6 header is used by the
1435    network for traffic management.  The value of the Traffic Class bits
1436    in a received packet or fragment might be different from the value
1437    sent by the packet's source.
1438
1439    The current use of the Traffic Class field for Differentiated
1440    Services and Explicit Congestion Notification is specified in
1441    [RFC2474] and [RFC3168].
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1463 8.  Upper-Layer Protocol Issues
1464
1465 8.1.  Upper-Layer Checksums
1466
1467    Any transport or other upper-layer protocol that includes the
1468    addresses from the IP header in its checksum computation must be
1469    modified for use over IPv6, to include the 128-bit IPv6 addresses
1470    instead of 32-bit IPv4 addresses.  In particular, the following
1471    illustration shows the TCP and UDP "pseudo-header" for IPv6:
1472
1473    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1474    |                                                               |
1475    +                                                               +
1476    |                                                               |
1477    +                         Source Address                        +
1478    |                                                               |
1479    +                                                               +
1480    |                                                               |
1481    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1482    |                                                               |
1483    +                                                               +
1484    |                                                               |
1485    +                      Destination Address                      +
1486    |                                                               |
1487    +                                                               +
1488    |                                                               |
1489    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1490    |                   Upper-Layer Packet Length                   |
1491    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1492    |                      zero                     |  Next Header  |
1493    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1494
1495       o  If the IPv6 packet contains a Routing header, the Destination
1496          Address used in the pseudo-header is that of the final
1497          destination.  At the originating node, that address will be in
1498          the last element of the Routing header; at the recipient(s),
1499          that address will be in the Destination Address field of the
1500          IPv6 header.
1501
1502       o  The Next Header value in the pseudo-header identifies the
1503          upper-layer protocol (e.g., 6 for TCP or 17 for UDP).  It will
1504          differ from the Next Header value in the IPv6 header if there
1505          are extension headers between the IPv6 header and the upper-
1506          layer header.
1507
1508
1509
1510
1519       o  The Upper-Layer Packet Length in the pseudo-header is the
1520          length of the upper-layer header and data (e.g., TCP header
1521          plus TCP data).  Some upper-layer protocols carry their own
1522          length information (e.g., the Length field in the UDP header);
1523          for such protocols, that is the length used in the pseudo-
1524          header.  Other protocols (such as TCP) do not carry their own
1525          length information, in which case the length used in the
1526          pseudo-header is the Payload Length from the IPv6 header, minus
1527          the length of any extension headers present between the IPv6
1528          header and the upper-layer header.
1529
1530       o  Unlike IPv4, the default behavior when UDP packets are
1531          originated by an IPv6 node is that the UDP checksum is not
1532          optional.  That is, whenever originating a UDP packet, an IPv6
1533          node must compute a UDP checksum over the packet and the
1534          pseudo-header, and, if that computation yields a result of
1535          zero, it must be changed to hex FFFF for placement in the UDP
1536          header.  IPv6 receivers must discard UDP packets containing a
1537          zero checksum and should log the error.
1538
1539       o  As an exception to the default behavior, protocols that use UDP
1540          as a tunnel encapsulation may enable zero-checksum mode for a
1541          specific port (or set of ports) for sending and/or receiving.
1542          Any node implementing zero-checksum mode must follow the
1543          requirements specified in "Applicability Statement for the Use
1544          of IPv6 UDP Datagrams with Zero Checksums" [RFC6936].
1545
1546    The IPv6 version of ICMP [RFC4443] includes the above pseudo-header
1547    in its checksum computation; this is a change from the IPv4 version
1548    of ICMP, which does not include a pseudo-header in its checksum.  The
1549    reason for the change is to protect ICMP from misdelivery or
1550    corruption of those fields of the IPv6 header on which it depends,
1551    which, unlike IPv4, are not covered by an internet-layer checksum.
1552    The Next Header field in the pseudo-header for ICMP contains the
1553    value 58, which identifies the IPv6 version of ICMP.
1554
1555 8.2.  Maximum Packet Lifetime
1556
1557    Unlike IPv4, IPv6 nodes are not required to enforce maximum packet
1558    lifetime.  That is the reason the IPv4 "Time-to-Live" field was
1559    renamed "Hop Limit" in IPv6.  In practice, very few, if any, IPv4
1560    implementations conform to the requirement that they limit packet
1561    lifetime, so this is not a change in practice.  Any upper-layer
1562    protocol that relies on the internet layer (whether IPv4 or IPv6) to
1563    limit packet lifetime ought to be upgraded to provide its own
1564    mechanisms for detecting and discarding obsolete packets.
1565
1566
1575 8.3.  Maximum Upper-Layer Payload Size
1576
1577    When computing the maximum payload size available for upper-layer
1578    data, an upper-layer protocol must take into account the larger size
1579    of the IPv6 header relative to the IPv4 header.  For example, in
1580    IPv4, TCP's Maximum Segment Size (MSS) option is computed as the
1581    maximum packet size (a default value or a value learned through Path
1582    MTU Discovery) minus 40 octets (20 octets for the minimum-length IPv4
1583    header and 20 octets for the minimum-length TCP header).  When using
1584    TCP over IPv6, the MSS must be computed as the maximum packet size
1585    minus 60 octets, because the minimum-length IPv6 header (i.e., an
1586    IPv6 header with no extension headers) is 20 octets longer than a
1587    minimum-length IPv4 header.
1588
1589 8.4.  Responding to Packets Carrying Routing Headers
1590
1591    When an upper-layer protocol sends one or more packets in response to
1592    a received packet that included a Routing header, the response
1593    packet(s) must not include a Routing header that was automatically
1594    derived by "reversing" the received Routing header UNLESS the
1595    integrity and authenticity of the received Source Address and Routing
1596    header have been verified (e.g., via the use of an Authentication
1597    header in the received packet).  In other words, only the following
1598    kinds of packets are permitted in response to a received packet
1599    bearing a Routing header:
1600
1601       o  Response packets that do not carry Routing headers.
1602
1603       o  Response packets that carry Routing headers that were NOT
1604          derived by reversing the Routing header of the received packet
1605          (for example, a Routing header supplied by local
1606          configuration).
1607
1608       o  Response packets that carry Routing headers that were derived
1609          by reversing the Routing header of the received packet IF AND
1610          ONLY IF the integrity and authenticity of the Source Address
1611          and Routing header from the received packet have been verified
1612          by the responder.
1613
1614 9.  IANA Considerations
1615
1616    RFC 2460 is referenced in a number of IANA registries.  These
1617    include:
1618
1619       o  Internet Protocol Version 6 (IPv6) Parameters [IANA-6P]
1620
1621       o  Assigned Internet Protocol Numbers [IANA-PN]
1622
1631       o  ONC RPC Network Identifiers (netids) [IANA-NI]
1632
1633       o  Network Layer Protocol Identifiers (NLPIDs) of Interest
1634          [IANA-NL]
1635
1636       o  Protocol Registries [IANA-PR]
1637
1638    The IANA has updated these references to point to this document.
1639
1640 10.  Security Considerations
1641
1642    IPv6, from the viewpoint of the basic format and transmission of
1643    packets, has security properties that are similar to IPv4.  These
1644    security issues include:
1645
1646       o  Eavesdropping, where on-path elements can observe the whole
1647          packet (including both contents and metadata) of each IPv6
1648          datagram.
1649       o  Replay, where the attacker records a sequence of packets off of
1650          the wire and plays them back to the party that originally
1651          received them.
1652       o  Packet insertion, where the attacker forges a packet with some
1653          chosen set of properties and injects it into the network.
1654       o  Packet deletion, where the attacker removes a packet from the
1655          wire.
1656       o  Packet modification, where the attacker removes a packet from
1657          the wire, modifies it, and reinjects it into the network.
1658       o  Man-in-the-middle (MITM) attacks, where the attacker subverts
1659          the communication stream in order to pose as the sender to
1660          receiver and the receiver to the sender.
1661       o  Denial-of-service (DoS) attacks, where the attacker sends large
1662          amounts of legitimate traffic to a destination to overwhelm it.
1663
1664    IPv6 packets can be protected from eavesdropping, replay, packet
1665    insertion, packet modification, and MITM attacks by use of the
1666    "Security Architecture for the Internet Protocol" [RFC4301].  In
1667    addition, upper-layer protocols such as Transport Layer Security
1668    (TLS) or Secure Shell (SSH) can be used to protect the application-
1669    layer traffic running on top of IPv6.
1670
1671    There is not any mechanism to protect against DoS attacks.  Defending
1672    against these type of attacks is outside the scope of this
1673    specification.
1674
1675    IPv6 addresses are significantly larger than IPv4 addresses making it
1676    much harder to scan the address space across the Internet and even on
1677    a single network link (e.g., Local Area Network).  See [RFC7707] for
1678    more information.
1687    IPv6 addresses of nodes are expected to be more visible on the
1688    Internet as compared with IPv4 since the use of address translation
1689    technology is reduced.  This creates some additional privacy issues
1690    such as making it easier to distinguish endpoints.  See [RFC7721] for
1691    more information.
1692
1693    The design of IPv6 extension header architecture, while adding a lot
1694    of flexibility, also creates new security challenges.  As noted
1695    below, issues relating to the Fragment extension header have been
1696    resolved, but it's clear that for any new extension header designed
1697    in the future, the security implications need to be examined
1698    thoroughly, and this needs to include how the new extension header
1699    works with existing extension headers.  See [RFC7045] for more
1700    information.
1701
1702    This version of the IPv6 specification resolves a number of security
1703    issues that were found with the previous version [RFC2460] of the
1704    IPv6 specification.  These include:
1705
1706       o  Revised the text to handle the case of fragments that are whole
1707          datagrams (i.e., both the Fragment Offset field and the M flag
1708          are zero).  If received, they should be processed as a
1709          reassembled packet.  Any other fragments that match should be
1710          processed independently.  The Fragment creation process was
1711          modified to not create whole datagram fragments (Fragment
1712          Offset field and the M flag are zero).  See [RFC6946] and
1713          [RFC8021] for more information.
1714
1715       o  Removed the paragraph in Section 5 that required including a
1716          Fragment header to outgoing packets if an ICMP Packet Too Big
1717          message reporting a Next-Hop MTU is less than 1280.  See
1718          [RFC6946] for more information.
1719
1720       o  Changed the text to require that IPv6 nodes must not create
1721          overlapping fragments.  Also, when reassembling an IPv6
1722          datagram, if one or more of its constituent fragments is
1723          determined to be an overlapping fragment, the entire datagram
1724          (and any constituent fragments) must be silently discarded.
1725          Includes clarification that no ICMP error message should be
1726          sent if overlapping fragments are received.  See [RFC5722] for
1727          more information.
1728
1729       o  Revised the text to require that all headers through the first
1730          upper-layer header are in the first fragment.  See [RFC7112]
1731          for more information.
1732
1733
1734
1743       o  Incorporated the updates from [RFC5095] and [RFC5871] to remove
1744          the description of the Routing Header type 0 (RH0), that the
1745          allocations guidelines for Routing headers are specified in RFC
1746          5871, and removed RH0 from the list of required extension
1747          headers.
1748
1749    Security issues relating to other parts of IPv6 including addressing,
1750    ICMPv6, Path MTU Discovery, etc., are discussed in the appropriate
1751    specifications.
1752
1753 11.  References
1754
1755 11.1.  Normative References
1756
1757    [RFC791]   Postel, J., "Internet Protocol", STD 5, RFC 791,
1758               DOI 10.17487/RFC0791, September 1981,
1759               <http://www.rfc-editor.org/info/rfc791>.
1760
1761    [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,
1762               "Definition of the Differentiated Services Field (DS
1763               Field) in the IPv4 and IPv6 Headers", RFC 2474,
1764               DOI 10.17487/RFC2474, December 1998,
1765               <http://www.rfc-editor.org/info/rfc2474>.
1766
1767    [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, "The Addition
1768               of Explicit Congestion Notification (ECN) to IP",
1769               RFC 3168, DOI 10.17487/RFC3168, September 2001,
1770               <http://www.rfc-editor.org/info/rfc3168>.
1771
1772    [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing
1773               Architecture", RFC 4291, DOI 10.17487/RFC4291, February
1774               2006, <http://www.rfc-editor.org/info/rfc4291>.
1775
1776    [RFC4443]  Conta, A., Deering, S., and M. Gupta, Ed., "Internet
1777               Control Message Protocol (ICMPv6) for the Internet
1778               Protocol Version 6 (IPv6) Specification", STD 89,
1779               RFC 4443, DOI 10.17487/RFC4443, March 2006,
1780               <http://www.rfc-editor.org/info/rfc4443>.
1781
1782    [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme,
1783               "IPv6 Flow Label Specification", RFC 6437,
1784               DOI 10.17487/RFC6437, November 2011,
1785               <http://www.rfc-editor.org/info/rfc6437>.
1786
1787
1788
1789
1790
1799 11.2.  Informative References
1800
1801    [Err2541]  RFC Errata, Erratum ID 2541, RFC 2460.
1802
1803    [Err4279]  RFC Errata, Erratum ID 4279, RFC 2460.
1804
1805    [Err4657]  RFC Errata, Erratum ID 4657, RFC 2460.
1806
1807    [Err4662]  RFC Errata, Erratum ID 4662, RFC 2460.
1808
1809    [IANA-6P]  IANA, "Internet Protocol Version 6 (IPv6) Parameters",
1810               <https://www.iana.org/assignments/ipv6-parameters>.
1811
1812    [IANA-EH]  IANA, "IPv6 Extension Header Types",
1813               <https://www.iana.org/assignments/ipv6-parameters>.
1814
1815    [IANA-NI]  IANA, "ONC RPC Network Identifiers (netids)",
1816               <https://www.iana.org/assignments/rpc-netids>.
1817
1818    [IANA-NL]  IANA, "Network Layer Protocol Identifiers (NLPIDs) of
1819               Interest", <https://www.iana.org/assignments/nlpids>.
1820
1821    [IANA-PN]  IANA, "Protocol Numbers",
1822               <https://www.iana.org/assignments/protocol-numbers>.
1823
1824    [IANA-PR]  IANA, "Protocol Registries", <https://www.iana.org/
1825               protocols>.
1826
1827    [IANA-RH]  IANA, "Routing Types", <https://www.iana.org/assignments/
1828               ipv6-parameters>.
1829
1830    [RFC1661]  Simpson, W., Ed., "The Point-to-Point Protocol (PPP)",
1831               STD 51, RFC 1661, DOI 10.17487/RFC1661, July 1994,
1832               <http://www.rfc-editor.org/info/rfc1661>.
1833
1834    [RFC2460]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
1835               (IPv6) Specification", RFC 2460, DOI 10.17487/RFC2460,
1836               December 1998, <http://www.rfc-editor.org/info/rfc2460>.
1837
1838    [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
1839               Internet Protocol", RFC 4301, DOI 10.17487/RFC4301,
1840               December 2005, <http://www.rfc-editor.org/info/rfc4301>.
1841
1842    [RFC4302]  Kent, S., "IP Authentication Header", RFC 4302,
1843               DOI 10.17487/RFC4302, December 2005,
1844               <http://www.rfc-editor.org/info/rfc4302>.
1845
1846
1855    [RFC4303]  Kent, S., "IP Encapsulating Security Payload (ESP)",
1856               RFC 4303, DOI 10.17487/RFC4303, December 2005,
1857               <http://www.rfc-editor.org/info/rfc4303>.
1858
1859    [RFC5095]  Abley, J., Savola, P., and G. Neville-Neil, "Deprecation
1860               of Type 0 Routing Headers in IPv6", RFC 5095,
1861               DOI 10.17487/RFC5095, December 2007,
1862               <http://www.rfc-editor.org/info/rfc5095>.
1863
1864    [RFC5722]  Krishnan, S., "Handling of Overlapping IPv6 Fragments",
1865               RFC 5722, DOI 10.17487/RFC5722, December 2009,
1866               <http://www.rfc-editor.org/info/rfc5722>.
1867
1868    [RFC5871]  Arkko, J. and S. Bradner, "IANA Allocation Guidelines for
1869               the IPv6 Routing Header", RFC 5871, DOI 10.17487/RFC5871,
1870               May 2010, <http://www.rfc-editor.org/info/rfc5871>.
1871
1872    [RFC6564]  Krishnan, S., Woodyatt, J., Kline, E., Hoagland, J., and
1873               M. Bhatia, "A Uniform Format for IPv6 Extension Headers",
1874               RFC 6564, DOI 10.17487/RFC6564, April 2012,
1875               <http://www.rfc-editor.org/info/rfc6564>.
1876
1877    [RFC6936]  Fairhurst, G. and M. Westerlund, "Applicability Statement
1878               for the Use of IPv6 UDP Datagrams with Zero Checksums",
1879               RFC 6936, DOI 10.17487/RFC6936, April 2013,
1880               <http://www.rfc-editor.org/info/rfc6936>.
1881
1882    [RFC6946]  Gont, F., "Processing of IPv6 "Atomic" Fragments",
1883               RFC 6946, DOI 10.17487/RFC6946, May 2013,
1884               <http://www.rfc-editor.org/info/rfc6946>.
1885
1886    [RFC7045]  Carpenter, B. and S. Jiang, "Transmission and Processing
1887               of IPv6 Extension Headers", RFC 7045,
1888               DOI 10.17487/RFC7045, December 2013,
1889               <http://www.rfc-editor.org/info/rfc7045>.
1890
1891    [RFC7112]  Gont, F., Manral, V., and R. Bonica, "Implications of
1892               Oversized IPv6 Header Chains", RFC 7112,
1893               DOI 10.17487/RFC7112, January 2014,
1894               <http://www.rfc-editor.org/info/rfc7112>.
1895
1896    [RFC7707]  Gont, F. and T. Chown, "Network Reconnaissance in IPv6
1897               Networks", RFC 7707, DOI 10.17487/RFC7707, March 2016,
1898               <http://www.rfc-editor.org/info/rfc7707>.
1899
1900
1901
1902
1911    [RFC7721]  Cooper, A., Gont, F., and D. Thaler, "Security and Privacy
1912               Considerations for IPv6 Address Generation Mechanisms",
1913               RFC 7721, DOI 10.17487/RFC7721, March 2016,
1914               <http://www.rfc-editor.org/info/rfc7721>.
1915
1916    [RFC7739]  Gont, F., "Security Implications of Predictable Fragment
1917               Identification Values", RFC 7739, DOI 10.17487/RFC7739,
1918               February 2016, <http://www.rfc-editor.org/info/rfc7739>.
1919
1920    [RFC8021]  Gont, F., Liu, W., and T. Anderson, "Generation of IPv6
1921               Atomic Fragments Considered Harmful", RFC 8021,
1922               DOI 10.17487/RFC8021, January 2017,
1923               <http://www.rfc-editor.org/info/rfc8021>.
1924
1925    [RFC8201]  McCann, J., Deering, S., Mogul, J., and R. Hinden, "Path
1926               MTU Discovery for IP version 6", STD 87, RFC 8201,
1927               DOI 10.17487/RFC8201, July 2017,
1928               <http://www.rfc-editor.org/info/rfc8201>.
1929
1930
1931
1932
1933
1934
1935
1936
1937
1938
1939
1940
1941
1942
1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
1957
1958
1967 Appendix A.  Formatting Guidelines for Options
1968
1969    This appendix gives some advice on how to lay out the fields when
1970    designing new options to be used in the Hop-by-Hop Options header or
1971    the Destination Options header, as described in Section 4.2.  These
1972    guidelines are based on the following assumptions:
1973
1974       o  One desirable feature is that any multi-octet fields within the
1975          Option Data area of an option be aligned on their natural
1976          boundaries, i.e., fields of width n octets should be placed at
1977          an integer multiple of n octets from the start of the
1978          Hop-by-Hop or Destination Options header, for n = 1, 2, 4, or
1979          8.
1980
1981       o  Another desirable feature is that the Hop-by-Hop or Destination
1982          Options header take up as little space as possible, subject to
1983          the requirement that the header be an integer multiple of 8
1984          octets long.
1985
1986       o  It may be assumed that, when either of the option-bearing
1987          headers are present, they carry a very small number of options,
1988          usually only one.
1989
1990    These assumptions suggest the following approach to laying out the
1991    fields of an option: order the fields from smallest to largest, with
1992    no interior padding, then derive the alignment requirement for the
1993    entire option based on the alignment requirement of the largest field
1994    (up to a maximum alignment of 8 octets).  This approach is
1995    illustrated in the following examples:
1996
1997    Example 1
1998
1999    If an option X required two data fields, one of length 8 octets and
2000    one of length 4 octets, it would be laid out as follows:
2001
2002                                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2003                                    | Option Type=X |Opt Data Len=12|
2004    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2005    |                         4-octet field                         |
2006    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2007    |                                                               |
2008    +                         8-octet field                         +
2009    |                                                               |
2010    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2011
2012
2013
2014
2023    Its alignment requirement is 8n+2, to ensure that the 8-octet field
2024    starts at a multiple-of-8 offset from the start of the enclosing
2025    header.  A complete Hop-by-Hop or Destination Options header
2026    containing this one option would look as follows:
2027
2028    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2029    |  Next Header  | Hdr Ext Len=1 | Option Type=X |Opt Data Len=12|
2030    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2031    |                         4-octet field                         |
2032    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2033    |                                                               |
2034    +                         8-octet field                         +
2035    |                                                               |
2036    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2037
2038    Example 2
2039
2040    If an option Y required three data fields, one of length 4 octets,
2041    one of length 2 octets, and one of length 1 octet, it would be laid
2042    out as follows:
2043
2044                                                    +-+-+-+-+-+-+-+-+
2045                                                    | Option Type=Y |
2046    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2047    |Opt Data Len=7 | 1-octet field |         2-octet field         |
2048    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2049    |                         4-octet field                         |
2050    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2051
2052    Its alignment requirement is 4n+3, to ensure that the 4-octet field
2053    starts at a multiple-of-4 offset from the start of the enclosing
2054    header.  A complete Hop-by-Hop or Destination Options header
2055    containing this one option would look as follows:
2056
2057    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2058    |  Next Header  | Hdr Ext Len=1 | Pad1 Option=0 | Option Type=Y |
2059    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2060    |Opt Data Len=7 | 1-octet field |         2-octet field         |
2061    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2062    |                         4-octet field                         |
2063    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2064    | PadN Option=1 |Opt Data Len=2 |       0       |       0       |
2065    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2066
2067
2068
2069
2070
2079    Example 3
2080
2081    A Hop-by-Hop or Destination Options header containing both options X
2082    and Y from Examples 1 and 2 would have one of the two following
2083    formats, depending on which option appeared first:
2084
2085    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2086    |  Next Header  | Hdr Ext Len=3 | Option Type=X |Opt Data Len=12|
2087    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2088    |                         4-octet field                         |
2089    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2090    |                                                               |
2091    +                         8-octet field                         +
2092    |                                                               |
2093    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2094    | PadN Option=1 |Opt Data Len=1 |       0       | Option Type=Y |
2095    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2096    |Opt Data Len=7 | 1-octet field |         2-octet field         |
2097    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2098    |                         4-octet field                         |
2099    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2100    | PadN Option=1 |Opt Data Len=2 |       0       |       0       |
2101    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2102
2103    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2104    |  Next Header  | Hdr Ext Len=3 | Pad1 Option=0 | Option Type=Y |
2105    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2106    |Opt Data Len=7 | 1-octet field |         2-octet field         |
2107    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2108    |                         4-octet field                         |
2109    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2110    | PadN Option=1 |Opt Data Len=4 |       0       |       0       |
2111    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2112    |       0       |       0       | Option Type=X |Opt Data Len=12|
2113    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2114    |                         4-octet field                         |
2115    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2116    |                                                               |
2117    +                         8-octet field                         +
2118    |                                                               |
2119    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2120
2121
2122
2123
2124
2125
2126
2135 Appendix B.  Changes Since RFC 2460
2136
2137    This memo has the following changes from RFC 2460.
2138
2139    o  Removed IP Next Generation from the Abstract.
2140
2141    o  Added text in Section 1 that the data transmission order is the
2142       same as IPv4 as defined in RFC 791.
2143
2144    o  Clarified the text in Section 3 about decrementing the Hop Limit.
2145
2146    o  Clarified that extension headers (except for the Hop-by-Hop
2147       Options header) are not processed, inserted, or deleted by any
2148       node along a packet's delivery path.
2149
2150    o  Changed requirement for the Hop-by-Hop Options header to a "may",
2151       and added a note to indicate what is expected regarding the
2152       Hop-by-Hop Options header.
2153
2154    o  Added a paragraph to Section 4 to clarify how extension headers
2155       are numbered and which are upper-layer headers.
2156
2157    o  Added a reference to the end of Section 4 to the "IPv6 Extension
2158       Header Types" IANA registry.
2159
2160    o  Incorporated the updates from RFCs 5095 and 5871 to remove the
2161       description of RH0, that the allocations guidelines for routing
2162       headers are specified in RFC 5871, and removed RH0 from the list
2163       of required extension headers.
2164
2165    o  Revised Section 4.5 on IPv6 fragmentation based on updates from
2166       RFCs 5722, 6946, 7112, and 8021.  This includes:
2167
2168       -  Revised the text to handle the case of fragments that are whole
2169          datagrams (i.e., both the Fragment Offset field and the M flag
2170          are zero).  If received, they should be processed as a
2171          reassembled packet.  Any other fragments that match should be
2172          processed independently.  The revised Fragment creation process
2173          was modified to not create whole datagram fragments (Fragment
2174          Offset field and the M flag are zero).
2175
2176       -  Changed the text to require that IPv6 nodes must not create
2177          overlapping fragments.  Also, when reassembling an IPv6
2178          datagram, if one or more its constituent fragments is
2179          determined to be an overlapping fragment, the entire datagram
2180          (and any constituent fragments) must be silently discarded.
2181          Includes a clarification that no ICMP error message should be
2182          sent if overlapping fragments are received.
2191       -  Revised the text to require that all headers through the first
2192          Upper-Layer header are in the first fragment.  This changed the
2193          text describing how packets are fragmented and reassembled and
2194          added a new error case.
2195
2196       -  Added text to the Fragment header process on handling exact
2197          duplicate fragments.
2198
2199       -  Updated the Fragmentation header text to correct the inclusion
2200          of an Authentication Header (AH) and noted No Next Header case.
2201
2202       -  Changed terminology in the Fragment header section from
2203          "Unfragmentable Headers" to "Per-Fragment headers".
2204
2205       -  Removed the paragraph in Section 5 that required including a
2206          Fragment header to outgoing packets if an ICMP Packet Too Big
2207          message reports a Next-Hop MTU less than 1280.
2208
2209       -  Changed the text to clarify MTU restriction and 8-byte
2210          restrictions, and noted the restriction on headers in the first
2211          fragment.
2212
2213    o  In Section 4.5, added clarification noting that some fields in the
2214       IPv6 header may also vary across the fragments being reassembled,
2215       and that other specifications may provide additional instructions
2216       for how they should be reassembled.  See, for example, Section 5.3
2217       of [RFC3168].
2218
2219    o  Incorporated the update from RFC 6564 to add a new Section 4.8
2220       that describes recommendations for defining new extension headers
2221       and options.
2222
2223    o  Added text to Section 5 to define "IPv6 minimum link MTU".
2224
2225    o  Simplified the text in Section 6 about Flow Labels and removed
2226       what was Appendix A ("Semantics and Usage of the Flow Label
2227       Field"); instead, pointed to the current specifications of the
2228       IPv6 Flow Label field in [RFC6437] and the Traffic Class field in
2229       [RFC2474] and [RFC3168].
2230
2231    o  Incorporated the update made by RFC 6935 ("IPv6 and UDP Checksums
2232       for Tunneled Packets") in Section 8.  Added an exception to the
2233       default behavior for the handling of UDP packets with zero
2234       checksums for tunnels.
2235
2236    o  Added instruction to Section 9, "IANA Considerations", to change
2237       references to RFC 2460 to this document.
2238
2247    o  Revised and expanded Section 10, "Security Considerations".
2248
2249    o  Added a paragraph to the Acknowledgments section acknowledging the
2250       authors of the updating documents.
2251
2252    o  Updated references to current versions and assigned references to
2253       normative and informative.
2254
2255    o  Made changes to resolve the errata on RFC 2460.  These are:
2256
2257          Erratum ID 2541 [Err2541]: This erratum notes that RFC 2460
2258          didn't update RFC 2205 when the length of the flow label was
2259          changed from 24 to 20 bits from RFC 1883.  This issue was
2260          resolved in RFC 6437 where the flow label is defined.  This
2261          specification now references RFC 6437.  No change is required.
2262
2263          Erratum ID 4279 [Err4279]: This erratum noted that the
2264          specification doesn't handle the case of a forwarding node
2265          receiving a packet with a zero Hop Limit.  This is fixed in
2266          Section 3 of this specification.
2267
2268          Erratum ID 4657 [Err4657]: This erratum proposed text that
2269          extension headers must never be inserted by any node other than
2270          the source of the packet.  This was resolved in Section 4,
2271          "IPv6 Extension Headers".
2272
2273          Erratum ID 4662 [Err4662]: This erratum proposed text that
2274          extension headers, with one exception, are not examined,
2275          processed, modified, inserted, or deleted by any node along a
2276          packet's delivery path.  This was resolved in Section 4, "IPv6
2277          Extension Headers".
2278
2279          Erratum ID 2843: This erratum is marked "Rejected".  No change
2280          was made.
2281
2282
2283
2284
2285
2286
2287
2288
2289
2290
2291
2292
2293
2294
2295
2296
2297
2298 Deering & Hinden             Standards Track                   [Page 41]
2299
2300 RFC 8200                   IPv6 Specification                  July 2017
2301
2302
2303 Acknowledgments
2304
2305    The authors gratefully acknowledge the many helpful suggestions of
2306    the members of the IPng Working Group, the End-to-End Protocols
2307    research group, and the Internet community at large.
2308
2309    The authors would also like to acknowledge the authors of the
2310    updating RFCs that were incorporated in this document to move the
2311    IPv6 specification to Internet Standard.  They are Joe Abley, Shane
2312    Amante, Jari Arkko, Manav Bhatia, Ronald P. Bonica, Scott Bradner,
2313    Brian Carpenter, P.F. Chimento, Marshall Eubanks, Fernando Gont,
2314    James Hoagland, Sheng Jiang, Erik Kline, Suresh Krishnan, Vishwas
2315    Manral, George Neville-Neil, Jarno Rajahalme, Pekka Savola, Magnus
2316    Westerlund, and James Woodyatt.
2317
2318 Authors' Addresses
2319
2320    Stephen E. Deering
2321    Retired
2322    Vancouver, British Columbia
2323    Canada
2324
2325
2326    Robert M. Hinden
2327    Check Point Software
2328    959 Skyway Road
2329    San Carlos, CA  94070
2330    United States of America
2331
2332    Email: bob.hinden@gmail.com
2333
2334
2335
2336
2337
2338
2339
2340
2341
2342
2343
2344
2345
2346
2347
2348
2349
2350
2351
2352
2353
2354 Deering & Hinden             Standards Track                   [Page 42]
2355
