   1
   2
   3
   4
   5 lpwan Working Group                                          A. Minaburo
   6 Internet-Draft                                                    Acklio
   7 Intended status: Standards Track                              L. Toutain
   8 Expires: December 31, 2018                                IMT-Atlantique
   9                                                                 C. Gomez
  10                                     Universitat Politecnica de Catalunya
  11                                                               D. Barthel
  12                                                              Orange Labs
  13                                                            June 29, 2018
  14
  15
  16   LPWAN Static Context Header Compression (SCHC) and fragmentation for
  17                               IPv6 and UDP
  18                draft-ietf-lpwan-ipv6-static-context-hc-16
  19
  20 Abstract
  21
  22    This document defines the Static Context Header Compression (SCHC)
  23    framework, which provides both header compression and fragmentation
  24    functionalities.  SCHC has been tailored for Low Power Wide Area
  25    Networks (LPWAN).
  26
  27    SCHC compression is based on a common static context stored in both
  28    the LPWAN devices and the network side.  This document defines a
  29    header compression mechanism and its application to compress IPv6/UDP
  30    headers.
  31
  32    This document also specifies a fragmentation and reassembly mechanism
  33    that is used to support the IPv6 MTU requirement over the LPWAN
  34    technologies.  Fragmentation is needed for IPv6 datagrams that, after
  35    SCHC compression or when such compression was not possible, still
  36    exceed the layer two maximum payload size.
  37
  38    The SCHC header compression and fragmentation mechanisms are
  39    independent of the specific LPWAN technology over which they are
  40    used.  Note that this document defines generic functionalities and
  41    advisedly offers flexibility with regard to parameter settings and
  42    mechanism choices.  Such settings and choices are expected to be made
  43    in other technology-specific documents.
  44
  45 Status of This Memo
  46
  47    This Internet-Draft is submitted in full conformance with the
  48    provisions of BCP 78 and BCP 79.
  49
  50    Internet-Drafts are working documents of the Internet Engineering
  51    Task Force (IETF).  Note that other groups may also distribute
  52
  61    working documents as Internet-Drafts.  The list of current Internet-
  62    Drafts is at https://datatracker.ietf.org/drafts/current/.
  63
  64    Internet-Drafts are draft documents valid for a maximum of six months
  65    and may be updated, replaced, or obsoleted by other documents at any
  66    time.  It is inappropriate to use Internet-Drafts as reference
  67    material or to cite them other than as "work in progress."
  68
  69    This Internet-Draft will expire on December 31, 2018.
  70
  71 Copyright Notice
  72
  73    Copyright (c) 2018 IETF Trust and the persons identified as the
  74    document authors.  All rights reserved.
  75
  76    This document is subject to BCP 78 and the IETF Trust's Legal
  77    Provisions Relating to IETF Documents
  78    (https://trustee.ietf.org/license-info) in effect on the date of
  79    publication of this document.  Please review these documents
  80    carefully, as they describe your rights and restrictions with respect
  81    to this document.  Code Components extracted from this document must
  82    include Simplified BSD License text as described in Section 4.e of
  83    the Trust Legal Provisions and are provided without warranty as
  84    described in the Simplified BSD License.
  85
  86 Table of Contents
  87
  88    1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
  89    2.  Requirements Notation . . . . . . . . . . . . . . . . . . . .   5
  90    3.  LPWAN Architecture  . . . . . . . . . . . . . . . . . . . . .   5
  91    4.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   6
  92    5.  SCHC overview . . . . . . . . . . . . . . . . . . . . . . . .   9
  93    6.  Rule ID . . . . . . . . . . . . . . . . . . . . . . . . . . .  13
  94    7.  Static Context Header Compression . . . . . . . . . . . . . .  13
  95      7.1.  SCHC C/D Rules  . . . . . . . . . . . . . . . . . . . . .  14
  96      7.2.  Rule ID for SCHC C/D  . . . . . . . . . . . . . . . . . .  16
  97      7.3.  Packet processing . . . . . . . . . . . . . . . . . . . .  16
  98      7.4.  Matching operators  . . . . . . . . . . . . . . . . . . .  18
  99      7.5.  Compression Decompression Actions (CDA) . . . . . . . . .  18
 100        7.5.1.  not-sent CDA  . . . . . . . . . . . . . . . . . . . .  20
 101        7.5.2.  value-sent CDA  . . . . . . . . . . . . . . . . . . .  20
 102        7.5.3.  mapping-sent CDA  . . . . . . . . . . . . . . . . . .  20
 103        7.5.4.  LSB CDA . . . . . . . . . . . . . . . . . . . . . . .  20
 104        7.5.5.  DevIID, AppIID CDA  . . . . . . . . . . . . . . . . .  21
 105        7.5.6.  Compute-* . . . . . . . . . . . . . . . . . . . . . .  21
 106    8.  Fragmentation . . . . . . . . . . . . . . . . . . . . . . . .  21
 107      8.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .  21
 108      8.2.  Fragmentation Tools . . . . . . . . . . . . . . . . . . .  22
 117      8.3.  Reliability modes . . . . . . . . . . . . . . . . . . . .  25
 118      8.4.  Fragmentation Formats . . . . . . . . . . . . . . . . . .  27
 119        8.4.1.  Fragments that are not the last one . . . . . . . . .  27
 120        8.4.2.  All-1 fragment  . . . . . . . . . . . . . . . . . . .  29
 121        8.4.3.  SCHC ACK format . . . . . . . . . . . . . . . . . . .  31
 122        8.4.4.  Abort formats . . . . . . . . . . . . . . . . . . . .  33
 123      8.5.  Baseline mechanism  . . . . . . . . . . . . . . . . . . .  35
 124        8.5.1.  No-ACK  . . . . . . . . . . . . . . . . . . . . . . .  36
 125        8.5.2.  ACK-Always  . . . . . . . . . . . . . . . . . . . . .  36
 126        8.5.3.  ACK-on-Error  . . . . . . . . . . . . . . . . . . . .  39
 127      8.6.  Supporting multiple window sizes  . . . . . . . . . . . .  40
 128      8.7.  Downlink SCHC Fragment transmission . . . . . . . . . . .  41
 129    9.  Padding management  . . . . . . . . . . . . . . . . . . . . .  42
 130    10. SCHC Compression for IPv6 and UDP headers . . . . . . . . . .  43
 131      10.1.  IPv6 version field . . . . . . . . . . . . . . . . . . .  43
 132      10.2.  IPv6 Traffic class field . . . . . . . . . . . . . . . .  43
 133      10.3.  Flow label field . . . . . . . . . . . . . . . . . . . .  44
 134      10.4.  Payload Length field . . . . . . . . . . . . . . . . . .  44
 135      10.5.  Next Header field  . . . . . . . . . . . . . . . . . . .  44
 136      10.6.  Hop Limit field  . . . . . . . . . . . . . . . . . . . .  45
 137      10.7.  IPv6 addresses fields  . . . . . . . . . . . . . . . . .  45
 138        10.7.1.  IPv6 source and destination prefixes . . . . . . . .  45
 139        10.7.2.  IPv6 source and destination IID  . . . . . . . . . .  46
 140      10.8.  IPv6 extensions  . . . . . . . . . . . . . . . . . . . .  46
 141      10.9.  UDP source and destination port  . . . . . . . . . . . .  46
 142      10.10. UDP length field . . . . . . . . . . . . . . . . . . . .  47
 143      10.11. UDP Checksum field . . . . . . . . . . . . . . . . . . .  47
 144    11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  48
 145    12. Security considerations . . . . . . . . . . . . . . . . . . .  48
 146      12.1.  Security considerations for SCHC
 147             Compression/Decompression  . . . . . . . . . . . . . . .  48
 148      12.2.  Security considerations for SCHC
 149             Fragmentation/Reassembly . . . . . . . . . . . . . . . .  48
 150    13. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  49
 151    14. References  . . . . . . . . . . . . . . . . . . . . . . . . .  50
 152      14.1.  Normative References . . . . . . . . . . . . . . . . . .  50
 153      14.2.  Informative References . . . . . . . . . . . . . . . . .  50
 154    Appendix A.  SCHC Compression Examples  . . . . . . . . . . . . .  51
 155    Appendix B.  Fragmentation Examples . . . . . . . . . . . . . . .  54
 156    Appendix C.  Fragmentation State Machines . . . . . . . . . . . .  60
 157    Appendix D.  SCHC Parameters - Ticket #15 . . . . . . . . . . . .  67
 158    Appendix E.  Note . . . . . . . . . . . . . . . . . . . . . . . .  68
 159    Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  69
 160
 161
 162
 163
 164
 173 1.  Introduction
 174
 175    This document defines the Static Context Header Compression (SCHC)
 176    framework, which provides both header compression and fragmentation
 177    functionalities.  SCHC has been tailored for Low Power Wide Area
 178    Networks (LPWAN).
 179
 180    Header compression is needed to efficiently bring Internet
 181    connectivity to the node within an LPWAN network.  Some LPWAN
 182    networks properties can be exploited to get an efficient header
 183    compression:
 184
 185    o  The network topology is star-oriented, which means that all
 186       packets follow the same path.  For the needs of this document, the
 187       architecture can simply be described as Devices (Dev) exchanging
 188       information with LPWAN Application Servers (App) through Network
 189       Gateways (NGW).
 190
 191    o  Because devices embed built-in applications, the traffic flows to
 192       be compressed are known in advance.  Indeed, new applications
 193       cannot be easily installed in LPWAN devices, as they would in
 194       computers or smartphones.
 195
 196    The Static Context Header Compression (SCHC) is defined for this
 197    environment.  SCHC uses a context, in which information about header
 198    fieds is stored.  This context is static: the values of the header
 199    fields do not change over time.  This avoids complex
 200    resynchronization mechanisms, that would be incompatible with LPWAN
 201    characteristics.  In most cases, a small context identifier is enough
 202    to represent the full IPv6/UDP headers.  The SCHC header compression
 203    mechanism is independent of the specific LPWAN technology over which
 204    it is used.
 205
 206    LPWAN technologies impose some strict limitations on traffic.  For
 207    instance, devices are sleeping most of the time and MAY receive data
 208    during short periods of time after transmission to preserve battery.
 209    LPWAN technologies are also characterized, among others, by a very
 210    reduced data unit and/or payload size (see [RFC8376]).  However, some
 211    of these technologies do not provide fragmentation functionality,
 212    therefore the only option for them to support the IPv6 MTU
 213    requirement of 1280 bytes [RFC8200] is to use a fragmentation
 214    protocol at the adaptation layer, below IPv6.  In response to this
 215    need, this document also defines a fragmentation/reassembly
 216    mechanism, which supports the IPv6 MTU requirement over LPWAN
 217    technologies.  Such functionality has been designed under the
 218    assumption that there is no out-of-sequence delivery of data units
 219    between the entity performing fragmentation and the entity performing
 220    reassembly.
 229    Note that this document defines generic functionality and
 230    purposefully offers flexibility with regard to parameter settings and
 231    mechanism choices.  Such settings and choices are expected to be made
 232    in other, technology-specific documents.
 233
 234 2.  Requirements Notation
 235
 236    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 237    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
 238    "OPTIONAL" in this document are to be interpreted as described in BCP
 239    14 [RFC2119] [RFC8174] when, and only when, they appear in all
 240    capitals, as shown here.
 241
 242 3.  LPWAN Architecture
 243
 244    LPWAN technologies have similar network architectures but different
 245    terminologies.  Using the terminology defined in [RFC8376], we can
 246    identify different types of entities in a typical LPWAN network, see
 247    Figure 1:
 248
 249    o Devices (Dev) are the end-devices or hosts (e.g. sensors,
 250    actuators, etc.).  There can be a very high density of devices per
 251    radio gateway.
 252
 253    o The Radio Gateway (RGW), which is the end point of the constrained
 254    link.
 255
 256    o The Network Gateway (NGW) is the interconnection node between the
 257    Radio Gateway and the Internet.
 258
 259    o LPWAN-AAA Server, which controls the user authentication and the
 260    applications.
 261
 262    o Application Server (App)
 263
 264                                               +------+
 265     ()   ()   ()       |                      |LPWAN-|
 266      ()  () () ()     / \       +---------+   | AAA  |
 267    () () () () () () /   \======|    ^    |===|Server|  +-----------+
 268     ()  ()   ()     |           | <--|--> |   +------+  |APPLICATION|
 269    ()  ()  ()  ()  / \==========|    v    |=============|   (App)   |
 270      ()  ()  ()   /   \         +---------+             +-----------+
 271     Dev        Radio Gateways         NGW
 272
 273
 274                        Figure 1: LPWAN Architecture
 275
 276
 285 4.  Terminology
 286
 287    This section defines the terminology and acronyms used in this
 288    document.
 289
 290    Note that the SCHC acronym is pronounced like "sheek" in English (or
 291    "chic" in French).  Therefore, this document writes "a SCHC Packet"
 292    instead of "an SCHC Packet".
 293
 294    o  Abort.  A SCHC Fragment format to signal the other end-point that
 295       the on-going fragment transmission is stopped and finished.
 296
 297    o  All-0.  The SCHC Fragment format for the last fragment of a window
 298       that is not the last one of a SCHC Packet (see window in this
 299       glossary).
 300
 301    o  All-1.  The SCHC Fragment format for the last fragment of the SCHC
 302       Packet.
 303
 304    o  All-0 empty.  An All-0 SCHC Fragment without payload.  It is used
 305       to request the SCHC ACK with the encoded Bitmap when the
 306       Retransmission Timer expires, in a window that is not the last one
 307       of a packet.
 308
 309    o  All-1 empty.  An All-1 SCHC Fragment without payload.  It is used
 310       to request the SCHC ACK with the encoded Bitmap when the
 311       Retransmission Timer expires in the last window of a packet.
 312
 313    o  App: LPWAN Application.  An application sending/receiving IPv6
 314       packets to/from the Device.
 315
 316    o  AppIID: Application Interface Identifier.  The IID that identifies
 317       the application server interface.
 318
 319    o  Bi: Bidirectional.  Characterises a Rule Entry that applies to
 320       headers of packets travelling in either direction (Up and Dw, see
 321       this glossary).
 322
 323    o  Bitmap: a bit field in the SCHC ACK message that tells the sender
 324       which SCHC Fragments in a window of fragments were correctly
 325       received.
 326
 327    o  C: Checked bit.  Used in an acknowledgement (SCHC ACK) header to
 328       determine if the MIC locally computed by the receiver matches (1)
 329       the received MIC or not (0).
 330
 331    o  CDA: Compression/Decompression Action.  Describes the reciprocal
 332       pair of actions that are performed at the compressor to compress a
 341       header field and at the decompressor to recover the original
 342       header field value.
 343
 344    o  Compression Residue.  The bits that need to be sent (beyond the
 345       Rule ID itself) after applying the SCHC compression over each
 346       header field.
 347
 348    o  Context: A set of Rules used to compress/decompress headers.
 349
 350    o  Dev: Device.  A node connected to an LPWAN.  A Dev SHOULD
 351       implement SCHC.
 352
 353    o  DevIID: Device Interface Identifier.  The IID that identifies the
 354       Dev interface.
 355
 356    o  DI: Direction Indicator.  This field tells which direction of
 357       packet travel (Up, Dw or Bi) a Rule applies to.  This allows for
 358       assymmetric processing.
 359
 360    o  DTag: Datagram Tag. This SCHC F/R header field is set to the same
 361       value for all SCHC Fragments carrying the same SCHC Packet.
 362
 363    o  Dw: Downlink direction for compression/decompression in both
 364       sides, from SCHC C/D in the network to SCHC C/D in the Dev.
 365
 366    o  FCN: Fragment Compressed Number.  This SCHC F/R header field
 367       carries an efficient representation of a larger-sized fragment
 368       number.
 369
 370    o  Field Description.  A line in the Rule table.
 371
 372    o  FID: Field Identifier.  This is an index to describe the header
 373       fields in a Rule.
 374
 375    o  FL: Field Length is the length of the packet header field.  It is
 376       expressed in bits for header fields of fixed lengths or as a type
 377       (e.g. variable, token length, ...) for field lengths that are
 378       unknown at the time of Rule creation.  The length of a header
 379       field is defined in the corresponding protocol specification.
 380
 381    o  FP: Field Position is a value that is used to identify the
 382       position where each instance of a field appears in the header.
 383
 384    o  IID: Interface Identifier.  See the IPv6 addressing architecture
 385       [RFC7136]
 388
 397    o  Inactivity Timer.  A timer used after receiving a SCHC Fragment to
 398       detect when, due to a communication error, there is no possibility
 399       to continue an on-going fragmented SCHC Packet transmission.
 400
 401    o  L2: Layer two.  The immediate lower layer SCHC interfaces with.
 402       It is provided by an underlying LPWAN technology.
 403
 404    o  L2 Word: this is the minimum subdivision of payload data that the
 405       L2 will carry.  In most L2 technologies, the L2 Word is an octet.
 406       In bit-oriented radio technologies, the L2 Word might be a single
 407       bit.  The L2 Word size is assumed to be constant over time for
 408       each device.
 409
 410    o  MIC: Message Integrity Check.  A SCHC F/R header field computed
 411       over the fragmented SCHC Packet and potential fragment padding,
 412       used for error detection after SCHC Packet reassembly.
 413
 414    o  MO: Matching Operator.  An operator used to match a value
 415       contained in a header field with a value contained in a Rule.
 416
 417    o  Padding (P).  Extra bits that may be appended by SCHC to a data
 418       unit that it passes to the underlying Layer 2 for transmission.
 419       SCHC itself operates on bits, not bytes, and does not have any
 420       alignment prerequisite.  See Section 9.
 421
 422    o  Retransmission Timer.  A timer used by the SCHC Fragment sender
 423       during an on-going fragmented SCHC Packet transmission to detect
 424       possible link errors when waiting for a possible incoming SCHC
 425       ACK.
 426
 427    o  Rule: A set of header field values.
 428
 429    o  Rule entry: A column in a Rule that describes a parameter of the
 430       header field.
 431
 432    o  Rule ID: An identifier for a Rule.  SCHC C/D on both sides share
 433       the same Rule ID for a given packet.  A set of Rule IDs are used
 434       to support SCHC F/R functionality.
 435
 436    o  SCHC ACK: A SCHC acknowledgement for fragmentation.  This message
 437       is used to report on the success of reception of a set of SCHC
 438       Fragments.  See Section 8 for more details.
 439
 440    o  SCHC C/D: Static Context Header Compression Compressor/
 441       Decompressor.  A mechanism used on both sides, at the Dev and at
 442       the network, to achieve Compression/Decompression of headers.
 443       SCHC C/D uses Rules to perform compression and decompression.
 444
 453    o  SCHC F/R: Static Context Header Compression Fragmentation/
 454       Reassembly.  A protocol used on both sides, at the Dev and at the
 455       network, to achieve Fragmentation/Reassembly of SCHC Packets.
 456       SCHC F/R has three reliability modes.
 457
 458    o  SCHC Fragment: A data unit that carries a subset of a SCHC Packet.
 459       SCHC F/R is needed when the size of a SCHC packet exceeds the
 460       available payload size of the underlying L2 technology data unit.
 461       See Section 8.
 462
 463    o  SCHC Packet: A packet (e.g. an IPv6 packet) whose header has been
 464       compressed as per the header compression mechanism defined in this
 465       document.  If the header compression process is unable to actually
 466       compress the packet header, the packet with the uncompressed
 467       header is still called a SCHC Packet (in this case, a Rule ID is
 468       used to indicate that the packet header has not been compressed).
 469       See Section 7 for more details.
 470
 471    o  TV: Target value.  A value contained in a Rule that will be
 472       matched with the value of a header field.
 473
 474    o  Up: Uplink direction for compression/decompression in both sides,
 475       from the Dev SCHC C/D to the network SCHC C/D.
 476
 477    o  W: Window bit.  A SCHC Fragment header field used in ACK-on-Error
 478       or ACK-Always mode Section 8, which carries the same value for all
 479       SCHC Fragments of a window.
 480
 481    o  Window: A subset of the SCHC Fragments needed to carry a SCHC
 482       Packet (see Section 8).
 483
 484 5.  SCHC overview
 485
 486    SCHC can be abstracted as an adaptation layer between IPv6 and the
 487    underlying LPWAN technology.  SCHC comprises two sublayers (i.e. the
 488    Compression sublayer and the Fragmentation sublayer), as shown in
 489    Figure 2.
 490
 500
 509                 +----------------+
 510                 |      IPv6      |
 511              +- +----------------+
 512              |  |   Compression  |
 513        SCHC <   +----------------+
 514              |  |  Fragmentation |
 515              +- +----------------+
 516                 |LPWAN technology|
 517                 +----------------+
 518
 519
 520         Figure 2: Protocol stack comprising IPv6, SCHC and an LPWAN
 521                                 technology
 522
 523    As per this document, when a packet (e.g. an IPv6 packet) needs to be
 524    transmitted, header compression is first applied to the packet.  The
 525    resulting packet after header compression (whose header may or may
 526    not actually be smaller than that of the original packet) is called a
 527    SCHC Packet.  If the SCHC Packet size exceeds the layer 2 (L2) MTU,
 528    fragmentation is then applied to the SCHC Packet.  The SCHC Packet or
 529    the SCHC Fragments are then transmitted over the LPWAN.  The
 530    reciprocal operations take place at the receiver.  This process is
 531    illustrated in Figure 3.
 532
 556
 565    A packet (e.g. an IPv6 packet)
 566             |                                           ^
 567             v                                           |
 568    +------------------+                      +--------------------+
 569    | SCHC Compression |                      | SCHC Decompression |
 570    +------------------+                      +--------------------+
 571             |                                           ^
 572             |   If no fragmentation (*)                 |
 573             +-------------- SCHC Packet  -------------->|
 574             |                                           |
 575             v                                           |
 576    +--------------------+                       +-----------------+
 577    | SCHC Fragmentation |                       | SCHC Reassembly |
 578    +--------------------+                       +-----------------+
 579          |     ^                                     |     ^
 580          |     |                                     |     |
 581          |     +-------------- SCHC ACK -------------+     |
 582          |                                                 |
 583          +-------------- SCHC Fragments -------------------+
 584
 585            SENDER                                    RECEIVER
 586
 587
 588    *: the decision to use Fragmentation or not is left to each LPWAN
 589       technology over which SCHC is applied. See LPWAN
 590       technology-specific documents.
 591
 592
 593    Figure 3: SCHC operations taking place at the sender and the receiver
 594
 595    The SCHC Packet is composed of the Compressed Header followed by the
 596    payload from the original packet (see Figure 4).  The Compressed
 597    Header itself is composed of a Rule ID and a Compression Residue.
 598    The Compression Residue may be absent, see Section 7.  Both the Rule
 599    ID and the Compression Residue potentially have a variable size, and
 600    generally are not a mutiple of bytes in size.
 601
 602    |  Rule ID +  Compression Residue |
 603    +---------------------------------+--------------------+
 604    |      Compressed Header          |      Payload       |
 605    +---------------------------------+--------------------+
 606
 607
 608                            Figure 4: SCHC Packet
 609
 610    The Fragment Header size is variable and depends on the Fragmentation
 611    parameters.  The Fragment payload contains a part of the SCHC Packet
 612    Compressed Header, a part of the SCHC Packet Payload or both.  Its
 621    size depends on the L2 data unit, see Section 8.  The SCHC Fragment
 622    has the following format:
 623
 624    | Rule ID + DTAG + W + FCN [+ MIC ] |   Partial  SCHC Packet  |
 625    +-----------------------------------+-------------------------+
 626    |        Fragment Header            |   Fragment  Payload     |
 627    +-----------------------------------+-------------------------+
 628
 629
 630                           Figure 5: SCHC Fragment
 631
 632    The SCHC ACK is only used for Fragmentation.  It has the following
 633    format:
 634
 635    |Rule ID + DTag + W|
 636    +------------------+-------- ... ---------+
 637    |    ACK Header    |    encoded Bitmap    |
 638    +------------------+-------- ... ---------+
 639
 640
 641                             Figure 6: SCHC ACK
 642
 643    The SCHC ACK Header and the encoded Bitmap both have variable size.
 644
 645    Figure 7 below maps the functional elements of Figure 3 onto the
 646    LPWAN architecture elements of Figure 1.
 647
 648         Dev                                                 App
 649    +----------------+                                  +--------------+
 650    | APP1 APP2 APP3 |                                  |APP1 APP2 APP3|
 651    |                |                                  |              |
 652    |       UDP      |                                  |     UDP      |
 653    |      IPv6      |                                  |    IPv6      |
 654    |                |                                  |              |
 655    |SCHC C/D and F/R|                                  |              |
 656    +--------+-------+                                  +-------+------+
 657             |   +--+     +----+     +-----------+              .
 658             +~~ |RG| === |NGW | === |   SCHC    |... Internet ..
 659                 +--+     +----+     |F/R and C/D|
 660                                     +-----------+
 661
 662                           Figure 7: Architecture
 663
 664    SCHC C/D and SCHC F/R are located on both sides of the LPWAN
 665    transmission, i.e. on the Dev side and on the Network side.
 666
 667    Let's describe the operation in the Uplink direction.  The Device
 668    application packets use IPv6 or IPv6/UDP protocols.  Before sending
 677    these packets, the Dev compresses their headers using SCHC C/D and,
 678    if the SCHC Packet resulting from the compression exceeds the maximum
 679    payload size of the underlying LPWAN technology, SCHC F/R is
 680    performed (see Section 8).  The resulting SCHC Fragments are sent as
 681    one or more L2 frames to an LPWAN Radio Gateway (RG) which forwards
 682    them to a Network Gateway (NGW).  The NGW sends the data to a SCHC F/
 683    R and then to the SCHC C/D for decompression.  The SCHC F/R and C/D
 684    on the Network side can be located in the NGW or somewhere else as
 685    long as a tunnel is established between them and the NGW.  Note that,
 686    for some LPWAN technologies, it MAY be suitable to locate the SCHC F/
 687    R functionality nearer the NGW, in order to better deal with time
 688    constraints of such technologies.  The SCHC C/D and F/R on both sides
 689    MUST share the same set of Rules.  After decompression, the packet
 690    can be sent over the Internet to one or several LPWAN Application
 691    Servers (App).
 692
 693    The SCHC C/D and F/R process is symmetrical, therefore the
 694    description of the Downlink direction trivially derives from the one
 695    above.
 696
 697 6.  Rule ID
 698
 699    Rule IDs are identifiers used to select the correct context either
 700    for Compression/Decompression or for Fragmentation/Reassembly.
 701
 702    The size of the Rule IDs is not specified in this document, as it is
 703    implementation-specific and can vary according to the LPWAN
 704    technology and the number of Rules, among others.
 705
 706    The Rule IDs are used:
 707
 708    o  In the SCHC C/D context, to identify the Rule (i.e., the set of
 709       Field Descriptions) that is used to compress a packet header.
 710
 711    o  At least one Rule ID MAY be allocated to tagging packets for which
 712       SCHC compression was not possible (no matching Rule was found).
 713
 714    o  In SCHC F/R, to identify the specific modes and settings of SCHC
 715       Fragments being transmitted, and to identify the SCK ACKs,
 716       including their modes and settings.  Note that in the case of
 717       bidirectional communication, at least two Rule ID values are
 718       therefore needed for F/R.
 719
 720 7.  Static Context Header Compression
 721
 722    In order to perform header compression, this document defines a
 723    mechanism called Static Context Header Compression (SCHC), which is
 724    based on using context, i.e. a set of Rules to compress or decompress
 733    headers.  SCHC avoids context synchronization, which is the most
 734    bandwidth-consuming operation in other header compression mechanisms
 735    such as RoHC [RFC5795].  Since the nature of packets is highly
 736    predictable in LPWAN networks, static contexts MAY be stored
 737    beforehand to omit transmitting some information over the air.  The
 738    contexts MUST be stored at both ends, and they can be learned by a
 739    provisioning protocol or by out of band means, or they can be pre-
 740    provisioned.  The way the contexts are provisioned on both ends is
 741    out of the scope of this document.
 742
 743 7.1.  SCHC C/D Rules
 744
 745    The main idea of the SCHC compression scheme is to transmit the Rule
 746    ID to the other end instead of sending known field values.  This Rule
 747    ID identifies a Rule that provides the closest match to the original
 748    packet values.  Hence, when a value is known by both ends, it is only
 749    necessary to send the corresponding Rule ID over the LPWAN network.
 750    How Rules are generated is out of the scope of this document.  The
 751    Rules MAY be changed at run-time but the way to do this will be
 752    specified in another document.
 753
 754    The context contains a list of Rules (cf.  Figure 8).  Each Rule
 755    itself contains a list of Field Descriptions composed of a Field
 756    Identifier (FID), a Field Length (FL), a Field Position (FP), a
 757    Direction Indicator (DI), a Target Value (TV), a Matching Operator
 758    (MO) and a Compression/Decompression Action (CDA).
 759
 760      /-----------------------------------------------------------------\
 761      |                         Rule N                                  |
 762     /-----------------------------------------------------------------\|
 763     |                       Rule i                                    ||
 764    /-----------------------------------------------------------------\||
 765    |  (FID)            Rule 1                                        |||
 766    |+-------+--+--+--+------------+-----------------+---------------+|||
 767    ||Field 1|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act||||
 768    |+-------+--+--+--+------------+-----------------+---------------+|||
 769    ||Field 2|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act||||
 770    |+-------+--+--+--+------------+-----------------+---------------+|||
 771    ||...    |..|..|..|   ...      | ...             | ...           ||||
 772    |+-------+--+--+--+------------+-----------------+---------------+||/
 773    ||Field N|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act|||
 774    |+-------+--+--+--+------------+-----------------+---------------+|/
 775    |                                                                 |
 776    \-----------------------------------------------------------------/
 777
 778
 779                 Figure 8: Compression/Decompression Context
 780
 789    A Rule does not describe how to parse a packet header to find each
 790    field.  This MUST be known from the compressor/decompressor.  Rules
 791    only describe the compression/decompression behavior for each header
 792    field.  In a Rule, the Field Descriptions are listed in the order in
 793    which the fields appear in the packet header.
 794
 795    A Rule also describes what Compression Residue is sent.  The
 796    Compression Residue is assembled by concatenating the residues for
 797    each field, in the order the Field Descriptions appear in the Rule.
 798
 799    The Context describes the header fields and its values with the
 800    following entries:
 801
 802    o  Field ID (FID) is a unique value to define the header field.
 803
 804    o  Field Length (FL) represents the length of the field.  It can be
 805       either a fixed value (in bits) if the length is known when the
 806       Rule is created or a type if the length is variable.  The length
 807       of a header field is defined in the corresponding protocol
 808       specification.  The type defines the process to compute the
 809       length, its unit (bits, bytes,...) and the value to be sent before
 810       the Compression Residue.
 811
 812    o  Field Position (FP): most often, a field only occurs once in a
 813       packet header.  Some fields may occur multiple times in a header.
 814       FP indicates which occurrence this Field Description applies to.
 815       The default value is 1 (first occurence).
 816
 817    o  A Direction Indicator (DI) indicates the packet direction(s) this
 818       Field Description applies to.  Three values are possible:
 819
 820       *  UPLINK (Up): this Field Description is only applicable to
 821          packets sent by the Dev to the App,
 822
 823       *  DOWNLINK (Dw): this Field Description is only applicable to
 824          packets sent from the App to the Dev,
 825
 826       *  BIDIRECTIONAL (Bi): this Field Description is applicable to
 827          packets travelling both Up and Dw.
 828
 829    o  Target Value (TV) is the value used to make the match with the
 830       packet header field.  The Target Value can be of any type
 831       (integer, strings, etc.).  For instance, it can be a single value
 832       or a more complex structure (array, list, etc.), such as a JSON or
 833       a CBOR structure.
 834
 835    o  Matching Operator (MO) is the operator used to match the Field
 836       Value and the Target Value.  The Matching Operator may require
 845       some parameters.  MO is only used during the compression phase.
 846       The set of MOs defined in this document can be found in
 847       Section 7.4.
 848
 849    o  Compression Decompression Action (CDA) describes the compression
 850       and decompression processes to be performed after the MO is
 851       applied.  Some CDAs MAY require parameter values for their
 852       operation.  CDAs are used in both the compression and the
 853       decompression functions.  The set of CDAs defined in this document
 854       can be found in Section 7.5.
 855
 856 7.2.  Rule ID for SCHC C/D
 857
 858    Rule IDs are sent by the compression function in one side and are
 859    received for the decompression function in the other side.  In SCHC
 860    C/D, the Rule IDs are specific to a Dev. Hence, multiple Dev
 861    instances MAY use the same Rule ID to define different header
 862    compression contexts.  To identify the correct Rule ID, the SCHC C/D
 863    needs to correlate the Rule ID with the Dev identifier to find the
 864    appropriate Rule to be applied.
 865
 866 7.3.  Packet processing
 867
 868    The compression/decompression process follows several steps:
 869
 870    o  Compression Rule selection: The goal is to identify which Rule(s)
 871       will be used to compress the packet's headers.  When doing
 872       decompression, on the network side the SCHC C/D needs to find the
 873       correct Rule based on the L2 address and in this way, it can use
 874       the DevIID and the Rule ID.  On the Dev side, only the Rule ID is
 875       needed to identify the correct Rule since the Dev only holds Rules
 876       that apply to itself.  The Rule will be selected by matching the
 877       Fields Descriptions to the packet header as described below.  When
 878       the selection of a Rule is done, this Rule is used to compress the
 879       header.  The detailed steps for compression Rule selection are the
 880       following:
 881
 882       *  The first step is to choose the Field Descriptions by their
 883          direction, using the Direction Indicator (DI).  A Field
 884          Description that does not correspond to the appropriate DI will
 885          be ignored.  If all the fields of the packet do not have a
 886          Field Description with the correct DI, the Rule is discarded
 887          and SCHC C/D proceeds to explore the next Rule.
 888
 889       *  When the DI has matched, then the next step is to identify the
 890          fields according to Field Position (FP).  If FP does not
 891          correspond, the Rule is not used and the SCHC C/D proceeds to
 892          consider the next Rule.
 901       *  Once the DI and the FP correspond to the header information,
 902          each packet field's value is then compared to the corresponding
 903          Target Value (TV) stored in the Rule for that specific field
 904          using the matching operator (MO).
 905
 906          If all the fields in the packet's header satisfy all the
 907          matching operators (MO) of a Rule (i.e. all MO results are
 908          True), the fields of the header are then compressed according
 909          to the Compression/Decompression Actions (CDAs) and a
 910          compressed header (with possibly a Compression Residue) SHOULD
 911          be obtained.  Otherwise, the next Rule is tested.
 912
 913       *  If no eligible Rule is found, then the header MUST be sent
 914          without compression.  This MAY require the use of the SCHC F/R
 915          process.
 916
 917    o  Sending: If an eligible Rule is found, the Rule ID is sent to the
 918       other end followed by the Compression Residue (which could be
 919       empty) and directly followed by the payload.  The Compression
 920       Residue is the concatenation of the Compression Residues for each
 921       field according to the CDAs for that Rule.  The way the Rule ID is
 922       sent depends on the specific underlying LPWAN technology.  For
 923       example, it can be either included in an L2 header or sent in the
 924       first byte of the L2 payload.  (Cf.  Figure 9).  This process will
 925       be specified in the LPWAN technology-specific document and is out
 926       of the scope of the present document.  On LPWAN technologies that
 927       are byte-oriented, the compressed header concatenated with the
 928       original packet payload is padded to a multiple of 8 bits, if
 929       needed.  See Section 9 for details.
 930
 931    o  Decompression: When doing decompression, on the network side the
 932       SCHC C/D needs to find the correct Rule based on the L2 address
 933       and in this way, it can use the DevIID and the Rule ID.  On the
 934       Dev side, only the Rule ID is needed to identify the correct Rule
 935       since the Dev only holds Rules that apply to itself.
 936
 937       The receiver identifies the sender through its device-id (e.g.
 938       MAC address, if exists) and selects the appropriate Rule from the
 939       Rule ID.  If a source identifier is present in the L2 technology,
 940       it is used to select the Rule ID.  This Rule describes the
 941       compressed header format and associates the values to the header
 942       fields.  The receiver applies the CDA action to reconstruct the
 943       original header fields.  The CDA application order can be
 944       different from the order given by the Rule.  For instance,
 945       Compute-* SHOULD be applied at the end, after all the other CDAs.

 948
 957    +--- ... --+------- ... -------+------------------+
 958    |  Rule ID |Compression Residue|  packet payload  |
 959    +--- ... --+------- ... -------+------------------+
 960
 961    |----- compressed header ------|
 962
 964                      Figure 9: SCHC C/D Packet Format
 965
 966 7.4.  Matching operators
 967
 968    Matching Operators (MOs) are functions used by both SCHC C/D
 969    endpoints involved in the header compression/decompression.  They are
 970    not typed and can be indifferently applied to integer, string or any
 971    other data type.  The result of the operation can either be True or
 972    False.  MOs are defined as follows:
 973
 974    o  equal: The match result is True if a field value in a packet and
 975       the value in the TV are equal.
 976
 977    o  ignore: No check is done between a field value in a packet and a
 978       TV in the Rule.  The result of the matching is always true.
 979
 980    o  MSB(x): A match is obtained if the most significant x bits of the
 981       packet header field value are equal to the TV in the Rule.  The x
 982       parameter of the MSB MO indicates how many bits are involved in
 983       the comparison.  If the FL is described as variable, the length
 984       must be a multiple of the unit.  For example, x must be multiple
 985       of 8 if the unit of the variable length is in bytes.
 986
 987    o  match-mapping: With match-mapping, the Target Value is a list of
 988       values.  Each value of the list is identified by a short ID (or
 989       index).  Compression is achieved by sending the index instead of
 990       the original header field value.  This operator matches if the
 991       header field value is equal to one of the values in the target
 992       list.
 993
 994 7.5.  Compression Decompression Actions (CDA)
 995
 996    The Compression Decompression Action (CDA) describes the actions
 997    taken during the compression of headers fields, and inversely, the
 998    action taken by the decompressor to restore the original value.
 999
1004
1013    /--------------------+-------------+----------------------------\
1014    |  Action            | Compression | Decompression              |
1015    |                    |             |                            |
1016    +--------------------+-------------+----------------------------+
1017    |not-sent            |elided       |use value stored in context |
1018    |value-sent          |send         |build from received value   |
1019    |mapping-sent        |send index   |value from index on a table |
1020    |LSB                 |send LSB     |TV, received value          |
1021    |compute-length      |elided       |compute length              |
1022    |compute-checksum    |elided       |compute UDP checksum        |
1023    |DevIID              |elided       |build IID from L2 Dev addr  |
1024    |AppIID              |elided       |build IID from L2 App addr  |
1025    \--------------------+-------------+----------------------------/
1028              Figure 10: Compression and Decompression Actions
1029
1030    Figure 10 summarizes the basic functions that can be used to compress
1031    and decompress a field.  The first column lists the actions name.
1032    The second and third columns outline the reciprocal compression/
1033    decompression behavior for each action.
1034
1035    Compression is done in order that Fields Descriptions appear in a
1036    Rule.  The result of each Compression/Decompression Action is
1037    appended to the working Compression Residue in that same order.  The
1038    receiver knows the size of each compressed field which can be given
1039    by the Rule or MAY be sent with the compressed header.
1040
1041    If the field is identified as being variable in the Field
1042    Description, then the size of the Compression Residue value (using
1043    the unit defined in the FL) MUST be sent first using the following
1044    coding:
1045
1046    o  If the size is between 0 and 14, it is sent as a 4-bits integer.
1047
1048    o  For values between 15 and 254, the first 4 bits sent are set to 1
1049       and the size is sent using 8 bits integer.
1050
1051    o  For higher values of size, the first 12 bits are set to 1 and the
1052       next two bytes contain the size value as a 16 bits integer.
1053
1054    If a field is not present in the packet but exists in the Rule and
1055    its FL is specified as being variable, size 0 MUST be sent to denote
1056    its absence.
1060
1069 7.5.1.  not-sent CDA
1070
1071    The not-sent function is generally used when the field value is
1072    specified in a Rule and therefore known by both the Compressor and
1073    the Decompressor.  This action is generally used with the "equal" MO.
1074    If MO is "ignore", there is a risk to have a decompressed field value
1075    different from the original field that was compressed.
1076
1077    The compressor does not send any Compression Residue for a field on
1078    which not-sent compression is applied.
1079
1080    The decompressor restores the field value with the Target Value
1081    stored in the matched Rule identified by the received Rule ID.
1082
1083 7.5.2.  value-sent CDA
1084
1085    The value-sent action is generally used when the field value is not
1086    known by both the Compressor and the Decompressor.  The value is sent
1087    as a residue in the compressed message header.  Both Compressor and
1088    Decompressor MUST know the size of the field, either implicitly (the
1089    size is known by both sides) or by explicitly indicating the length
1090    in the Compression Residue, as defined in Section 7.5.  This function
1091    is generally used with the "ignore" MO.
1092
1093 7.5.3.  mapping-sent CDA
1094
1095    The mapping-sent is used to send a smaller index (the index into the
1096    Target Value list of values) instead of the original value.  This
1097    function is used together with the "match-mapping" MO.
1098
1099    On the compressor side, the match-mapping Matching Operator searches
1100    the TV for a match with the header field value and the mapping-sent
1101    CDA appends the corresponding index to the Compression Residue to be
1102    sent.  On the decompressor side, the CDA uses the received index to
1103    restore the field value by looking up the list in the TV.
1104
1105    The number of bits sent is the minimal size for coding all the
1106    possible indices.
1107
1108 7.5.4.  LSB CDA
1109
1110    The LSB action is used together with the "MSB(x)" MO to avoid sending
1111    the most significant part of the packet field if that part is already
1112    known by the receiving end.  The number of bits sent is the original
1113    header field length minus the length specified in the MSB(x) MO.
1116
1125    The compressor sends the Least Significant Bits (e.g.  LSB of the
1126    length field).  The decompressor concatenates the x most significant
1127    bits of Target Value and the received residue.
1128
1129    If this action needs to be done on a variable length field, the size
1130    of the Compression Residue in bytes MUST be sent as described in
1131    Section 7.5.
1132
1133 7.5.5.  DevIID, AppIID CDA
1134
1135    These functions are used to process respectively the Dev and the App
1136    Interface Identifiers (DevIID and AppIID) of the IPv6 addresses.
1137    AppIID CDA is less common since current LPWAN technologies frames
1138    contain a single address, which is the Dev's address.
1139
1140    The IID value MAY be computed from the Device ID present in the L2
1141    header, or from some other stable identifier.  The computation is
1142    specific to each LPWAN technology and MAY depend on the Device ID
1143    size.
1144
1145    In the downlink direction (Dw), at the compressor, this DevIID CDA
1146    may be used to generate the L2 addresses on the LPWAN, based on the
1147    packet destination address.
1148
1149 7.5.6.  Compute-*
1150
1151    Some fields are elided during compression and reconstructed during
1152    decompression.  This is the case for length and checksum, so:
1153
1154    o  compute-length: computes the length assigned to this field.  This
1155       CDA MAY be used to compute IPv6 length or UDP length.
1156
1157    o  compute-checksum: computes a checksum from the information already
1158       received by the SCHC C/D.  This field MAY be used to compute UDP
1159       checksum.
1160
1161 8.  Fragmentation
1162
1163 8.1.  Overview
1164
1165    In LPWAN technologies, the L2 data unit size typically varies from
1166    tens to hundreds of bytes.  The SCHC F/R (Fragmentation /Reassembly)
1167    MAY be used either because after applying SCHC C/D or when SCHC C/D
1168    is not possible the entire SCHC Packet still exceeds the L2 data
1169    unit.
1170
1171    The SCHC F/R functionality defined in this document has been designed
1172    under the assumption that data unit out-of-sequence delivery will not
1181    happen between the entity performing fragmentation and the entity
1182    performing reassembly.  This assumption allows reducing the
1183    complexity and overhead of the SCHC F/R mechanism.
1184
1185    This document also assumes that the L2 data unit size does not vary
1186    while a fragmented SCHC Packet is being transmitted.
1187
1188    To adapt the SCHC F/R to the capabilities of LPWAN technologies, it
1189    is required to enable optional SCHC Fragment retransmission and to
1190    allow for a range of reliability options for sending the SCHC
1191    Fragments.  This document does not make any decision with regard to
1192    which SCHC Fragment delivery reliability mode will be used over a
1193    specific LPWAN technology.  These details will be defined in other
1194    technology-specific documents.
1195
1196    SCHC F/R uses the knowledge of the L2 Word size (see Section 4) to
1197    encode some messages.  Therefore, SCHC MUST know the L2 Word size.
1198    SCHC F/R generates SCHC Fragments and SCHC ACKs that are, for most of
1199    them, multiples of L2 Words.  The padding overhead is kept to the
1200    absolute minimum.  See Section 9.
1201
1202 8.2.  Fragmentation Tools
1203
1204    This subsection describes the different tools that are used to enable
1205    the SCHC F/R functionality defined in this document, such as fields
1206    in the SCHC F/R header frames (see the related formats in
1207    Section 8.4), windows and timers.
1208
1209    o  Rule ID.  The Rule ID is present in the SCHC Fragment header and
1210       in the SCHC ACK header formats.  The Rule ID in a SCHC Fragment
1211       header is used to identify that a SCHC Fragment is being carried,
1212       which SCHC F/R reliability mode is used and which window size is
1213       used.  The Rule ID in the SCHC Fragment header also allows
1214       interleaving non-fragmented SCHC Packets and SCHC Fragments that
1215       carry other SCHC Packets.  The Rule ID in a SCHC ACK identifies
1216       the message as a SCHC ACK.
1217
1218    o  Fragment Compressed Number (FCN).  The FCN is included in all SCHC
1219       Fragments.  This field can be understood as a truncated, efficient
1220       representation of a larger-sized fragment number, and does not
1221       carry an absolute SCHC Fragment number.  There are two FCN
1222       reserved values that are used for controlling the SCHC F/R
1223       process, as described next:
1224
1225       *  The FCN value with all the bits equal to 1 (All-1) denotes the
1226          last SCHC Fragment of a packet.  The last window of a packet is
1227          called an All-1 window.
1228
1237       *  The FCN value with all the bits equal to 0 (All-0) denotes the
1238          last SCHC Fragment of a window that is not the last one of the
1239          packet.  Such a window is called an All-0 window.
1240
1241       The rest of the FCN values are assigned in a sequentially
1242       decreasing order, which has the purpose to avoid possible
1243       ambiguity for the receiver that might arise under certain
1244       conditions.  In the SCHC Fragments, this field is an unsigned
1245       integer, with a size of N bits.  In the No-ACK mode, the size is
1246       set to 1 bit (N=1), All-0 is used in all SCHC Fragments and All-1
1247       for the last one.  For the other reliability modes, it is
1248       recommended to use a number of bits (N) equal to or greater than
1249       3.  Nevertheless, the appropriate value of N MUST be defined in
1250       the corresponding technology-specific profile documents.  For
1251       windows that are not the last one of a fragmented SCHC Packet, the
1252       FCN for the last SCHC Fragment in such windows is an All-0.  This
1253       indicates that the window is finished and communication proceeds
1254       according to the reliability mode in use.  The FCN for the last
1255       SCHC Fragment in the last window is an All-1, indicating the last
1256       SCHC Fragment of the SCHC Packet.  It is also important to note
1257       that, in the No-ACK mode or when N=1, the last SCHC Fragment of
1258       the packet will carry a FCN equal to 1, while all previous SCHC
1259       Fragments will carry a FCN to 0.  For further details see
1260       Section 8.5.  The highest FCN in the window, denoted MAX_WIND_FCN,
1261       MUST be a value equal to or smaller than 2^N-2.  (Example for N=5,
1262       MAX_WIND_FCN MAY be set to 23, then subsequent FCNs are set
1263       sequentially and in decreasing order, and the FCN will wrap from 0
1264       back to 23).
1265
1266    o  Datagram Tag (DTag).  The DTag field, if present, is set to the
1267       same value for all SCHC Fragments carrying the same SCHC
1268       packet, and to different values for different SCHC Packets.  Using
1269       this field, the sender can interleave fragments from different
1270       SCHC Packets, while the receiver can still tell them apart.  In
1271       the SCHC Fragment formats, the size of the DTag field is T bits,
1272       which MAY be set to a value greater than or equal to 0 bits.  For
1273       each new SCHC Packet processed by the sender, DTag MUST be
1274       sequentially increased, from 0 to 2^T - 1 wrapping back from 2^T -
1275       1 to 0.  In the SCHC ACK format, DTag carries the same value as
1276       the DTag field in the SCHC Fragments for which this SCHC ACK is
1277       intended.  When there is no Dtag, there can be only one SCHC
1278       Packet in transit.  Only after all its fragments have been
1279       transmitted can another SCHC Packet be sent.  The length of DTag,
1280       denoted T, is not specified in this document because it is
1281       technology dependant.  It will be defined in the corresponding
1282       technology-specific documents, based on the number of simultaneous
1283       packets that are to be supported.
1284
1293    o  W (window): W is a 1-bit field.  This field carries the same value
1294       for all SCHC Fragments of a window, and it is complemented for the
1295       next window.  The initial value for this field is 0.  In the SCHC
1296       ACK format, this field also has a size of 1 bit.  In all SCHC
1297       ACKs, the W bit carries the same value as the W bit carried by the
1298       SCHC Fragments whose reception is being positively or negatively
1299       acknowledged by the SCHC ACK.
1300
1301    o  Message Integrity Check (MIC).  This field is computed by the
1302       sender over the complete SCHC Packet and before SCHC
1303       fragmentation.  The MIC allows the receiver to check errors in the
1304       reassembled packet, while it also enables compressing the UDP
1305       checksum by use of SCHC compression.  The CRC32 as 0xEDB88320
1306       (i.e. the reverse representation of the polynomial used e.g. in
1307       the Ethernet standard [RFC3385]) is recommended as the default
1308       algorithm for computing the MIC.  Nevertheless, other algorithms
1309       MAY be required and are defined in the technology-specific
1310       documents as well as the length in bits of the MIC used.
1311
1312    o  C (MIC checked): C is a 1-bit field.  This field is used in the
1313       SCHC ACK packets to report the outcome of the MIC check, i.e.
1314       whether the reassembled packet was correctly received or not.  A
1315       value of 1 represents a positive MIC check at the receiver side
1316       (i.e. the MIC computed by the receiver matches the received MIC).
1317
1318    o  Retransmission Timer.  A SCHC Fragment sender uses it after the
1319       transmission of a window to detect a transmission error of the
1320       SCHC ACK corresponding to this window.  Depending on the
1321       reliability mode, it will lead to a request a SCHC ACK
1322       retransmission (in ACK-Always mode) or it will trigger the
1323       transmission of the next window (in ACK-on-Error mode).  The
1324       duration of this timer is not defined in this document and MUST be
1325       defined in the corresponding technology-specific documents.
1326
1327    o  Inactivity Timer.  A SCHC Fragment receiver uses it to take action
1328       when there is a problem in the transmission of SCHC fragments.
1329       Such a problem could be detected by the receiver not getting a
1330       single SCHC Fragment during a given period of time.  When this
1331       happens, an Abort message will be sent (see related text later in
1332       this section).  Initially, and each time a SCHC Fragment is
1333       received, the timer is reinitialized.  The duration of this timer
1334       is not defined in this document and MUST be defined in the
1335       corresponding technology-specific document.
1336
1337    o  Attempts.  This counter counts the requests for a missing SCHC
1338       ACK.  When it reaches the value MAX_ACK_REQUESTS, the sender
1339       assumes there are recurrent SCHC Fragment transmission errors and
1340       determines that an Abort is needed.  The default value
1349       MAX_ACK_REQUESTS is not stated in this document, and it is
1350       expected to be defined in the corresponding technology-specific
1351       document.  The Attempts counter is defined per window.  It is
1352       initialized each time a new window is used.
1353
1354    o  Bitmap.  The Bitmap is a sequence of bits carried in a SCHC ACK.
1355       Each bit in the Bitmap corresponds to a SCHC fragment of the
1356       current window, and provides feedback on whether the SCHC Fragment
1357       has been received or not.  The right-most position on the Bitmap
1358       reports if the All-0 or All-1 fragment has been received or not.
1359       Feedback on the SCHC fragment with the highest FCN value is
1360       provided by the bit in the left-most position of the Bitmap.  In
1361       the Bitmap, a bit set to 1 indicates that the SCHC Fragment of FCN
1362       corresponding to that bit position has been correctly sent and
1363       received.  The text above describes the internal representation of
1364       the Bitmap.  When inserted in the SCHC ACK for transmission from
1365       the receiver to the sender, the Bitmap is shortened for energy/
1366       bandwidth optimisation, see more details in Section 8.4.3.1.
1367
1368    o  Abort.  On expiration of the Inactivity timer, or when Attempts
1369       reaches MAX_ACK_REQUESTS or upon occurrence of some other error,
1370       the sender or the receiver may use the Abort.  When the receiver
1371       needs to abort the on-going fragmented SCHC Packet transmission,
1372       it sends the Receiver-Abort format.  When the sender needs to
1373       abort the transmission, it sends the Sender-Abort format.  None of
1374       the Aborts are acknowledged.
1375
1376 8.3.  Reliability modes
1377
1378    This specification defines three reliability modes: No-ACK, ACK-
1379    Always, and ACK-on-Error.  ACK-Always and ACK-on-Error operate on
1380    windows of SCHC Fragments.  A window of SCHC Fragments is a subset of
1381    the full set of SCHC Fragments needed to carry a SCHC Packet.
1382
1383    o  No-ACK.  No-ACK is the simplest SCHC Fragment reliability mode.
1384       The receiver does not generate overhead in the form of
1385       acknowledgements (ACKs).  However, this mode does not enhance
1386       reliability beyond that offered by the underlying LPWAN
1387       technology.  In the No-ACK mode, the receiver MUST NOT issue SCHC
1388       ACKs.  See further details in Section 8.5.1.
1389
1390    o  ACK-Always.  The ACK-Always mode provides flow control using a
1391       windowing scheme.  This mode is also able to handle long bursts of
1392       lost SCHC Fragments since detection of such events can be done
1393       before the end of the SCHC Packet transmission as long as the
1394       window size is short enough.  However, such benefit comes at the
1395       expense of SCHC ACK use.  In ACK-Always, the receiver sends a SCHC
1396       ACK after a window of SCHC Fragments has been received.  The SCHC
1405       ACK is used to inform the sender which SCHC Fragments in the
1406       current window have been well received.  Upon a SCHC ACK
1407       reception, the sender retransmits the lost SCHC Fragments.  When a
1408       SCHC ACK is lost and the sender has not received it by the
1409       expiration of the Retransmission Timer, the sender uses a SCHC ACK
1410       request by sending the All-0 empty SCHC Fragment when it is not
1411       the last window and the All-1 empty Fragment when it is the last
1412       window.  The maximum number of SCHC ACK requests is
1413       MAX_ACK_REQUESTS.  If MAX_ACK_REQUESTS is reached, the
1414       transmission needs to be aborted.  See further details in
1415       Section 8.5.2.
1416
1417    o  ACK-on-Error.  The ACK-on-Error mode is suitable for links
1418       offering relatively low L2 data unit loss probability.  In this
1419       mode, the SCHC Fragment receiver reduces the number of SCHC ACKs
1420       transmitted, which MAY be especially beneficial in asymmetric
1421       scenarios.  The receiver transmits a SCHC ACK only after the
1422       complete window transmission and if at least one SCHC Fragment of
1423       this window has been lost.  An exception to this behavior is in
1424       the last window, where the receiver MUST transmit a SCHC ACK,
1425       including the C bit set based on the MIC checked result, even if
1426       all the SCHC Fragments of the last window have been correctly
1427       received.  The SCHC ACK gives the state of all the SCHC Fragments
1428       of the current window (received or lost).  Upon a SCHC ACK
1429       reception, the sender retransmits any lost SCHC Fragments based on
1430       the SCHC ACK.  If a SCHC ACK is not transmitted back by the
1431       receiver at the end of a window, the sender assumes that all SCHC
1432       Fragments have been correctly received.  When a SCHC ACK is lost,
1433       the sender assumes that all SCHC Fragments covered by the lost
1434       SCHC ACK have been successfully delivered, so the sender continues
1435       transmitting the next window of SCHC Fragments.  If the next SCHC
1436       Fragments received belong to the next window and it is still
1437       expecting fragments from the previous window, the receiver will
1438       abort the on-going fragmented packet transmission.  See further
1439       details in Section 8.5.3.
1440
1441    The same reliability mode MUST be used for all SCHC Fragments of a
1442    SCHC Packet.  The decision on which reliability mode will be used and
1443    whether the same reliability mode applies to all SCHC Packets is an
1444    implementation problem and is out of the scope of this document.
1445
1446    Note that the reliability mode choice is not necessarily tied to a
1447    particular characteristic of the underlying L2 LPWAN technology, e.g.
1448    the No-ACK mode MAY be used on top of an L2 LPWAN technology with
1449    symmetric characteristics for uplink and downlink.  This document
1450    does not make any decision as to which SCHC Fragment reliability
1451    modes are relevant for a specific LPWAN technology.
1452
1461    Examples of the different reliability modes described are provided in
1462    Appendix B.
1463
1464 8.4.  Fragmentation Formats
1465
1466    This section defines the SCHC Fragment format, including the All-0
1467    and All-1 formats and their "empty" variations, the SCHC ACK format
1468    and the Abort formats.
1469
1470    A SCHC Fragment conforms to the general format shown in Figure 11.
1471    It comprises a SCHC Fragment Header and a SCHC Fragment Payload.  In
1472    addition, the last SCHC Fragment carries as many padding bits as
1473    needed to fill up an L2 Word.  The SCHC Fragment Payload carries a
1474    subset of the SCHC Packet.  The SCHC Fragment is the data unit passed
1475    on to the L2 for transmission.
1476
1477    +-----------------+-----------------------+~~~~~~~~~~~~~~~~~~~~~
1478    | Fragment Header |   Fragment payload    | padding (as needed)
1479    +-----------------+-----------------------+~~~~~~~~~~~~~~~~~~~~~
1480
1481    Figure 11: SCHC Fragment general format.  Presence of a padding field
1482                                 is optional
1483
1484 8.4.1.  Fragments that are not the last one
1485
1486    In ACK-Always or ACK-on-Error, SCHC Fragments except the last one
1487    SHALL conform to the detailed format defined in Figure 12.
1488
1489     |----- Fragment Header -----|
1490               |-- T --|1|-- N --|
1491     +-- ... --+- ... -+-+- ... -+--------...-------+
1492     | Rule ID | DTag  |W|  FCN  | Fragment payload |
1493     +-- ... --+- ... -+-+- ... -+--------...-------+
1494
1495
1496      Figure 12: Fragment Detailed Format for Fragments except the Last
1497                      One, ACK-Always and ACK-on-Error
1498
1499    In the No-ACK mode, SCHC Fragments except the last one SHALL conform
1500    to the detailed format defined in Figure 13.
1501
1508
1517     |---- Fragment Header ----|
1518               |-- T --|-- N --|
1519     +-- ... --+- ... -+- ... -+--------...-------+
1520     | Rule ID |  DTag |  FCN  | Fragment payload |
1521     +-- ... --+- ... -+- ... -+--------...-------+
1522
1525      Figure 13: Fragment Detailed Format for Fragments except the Last
1526                              One, No-ACK mode
1527
1528    The total size of the fragment header is not necessarily a multiple
1529    of the L2 Word size.  To build the fragment payload, SCHC F/R MUST
1530    take from the SCHC Packet a number of bits that makes the SCHC
1531    Fragment an exact multiple of L2 Words.  As a consequence, no padding
1532    bit is used for these fragments.
1533
1534 8.4.1.1.  All-0 fragment
1535
1536    The All-0 format is used for sending the last SCHC Fragment of a
1537    window that is not the last window of the SCHC Packet.
1538
1539    |----- Fragment Header -----|
1540              |-- T --|1|-- N --|
1541    +-- ... --+- ... -+-+- ... -+--------...-------+
1542    | Rule ID | DTag  |W|  0..0 | Fragment payload |
1543    +-- ... --+- ... -+-+- ... -+--------...-------+
1544
1546                  Figure 14: All-0 fragment detailed format
1547
1548    This is simply an instance of the format described in Figure 12.  An
1549    All-0 fragment payload MUST be at least the size of an L2 Word.  The
1550    rationale is that the All-0 empty fragment (see Section 8.4.1.2)
1551    needs to be distinguishable from the All-0 regular fragment, even in
1552    the presence of padding.
1553
1554 8.4.1.2.  All-0 empty fragment
1555
1556    The All-0 empty fragment is an exception to the All-0 fragment
1557    described above.  It is used by a sender to request the
1558    retransmission of a SCHC ACK by the receiver.  It is only used in
1559    ACK-Always mode.
1560
1564
1573    |----- Fragment Header -----|
1574              |-- T --|1|-- N --|
1575    +-- ... --+- ... -+-+- ... -+~~~~~~~~~~~~~~~~~~~~~
1576    | Rule ID | DTag  |W|  0..0 | padding (as needed)      (no payload)
1577    +-- ... --+- ... -+-+- ... -+~~~~~~~~~~~~~~~~~~~~~
1578
1580               Figure 15: All-0 empty fragment detailed format
1581
1582    The size of the All-0 fragment header is generally not a multiple of
1583    the L2 Word size.  Therefore, an All-0 empty fragment generally needs
1584    padding bits.  The padding bits are always less than an L2 Word.
1585
1586    Since an All-0 payload MUST be at least the size of an L2 Word, a
1587    receiver can distinguish an All-0 empty fragment from a regular All-0
1588    fragment, even in the presence of padding.
1589
1590 8.4.2.  All-1 fragment
1591
1592    In the No-ACK mode, the last SCHC Fragment of a SCHC Packet SHALL
1593    contain a SCHC Fragment header that conforms to the detailed format
1594    shown in Figure 16.
1595
1596    |---------- Fragment Header ----------|
1597                 |-- T --|-N=1-|
1598    +---- ... ---+- ... -+-----+-- ... --+---...---+~~~~~~~~~~~~~~~~~~~~~
1599    |   Rule ID  | DTag  |  1  |   MIC   | payload | padding (as needed)
1600    +---- ... ---+- ... -+-----+-- ... --+---...---+~~~~~~~~~~~~~~~~~~~~~
1601
1603    Figure 16: All-1 Fragment Detailed Format for the Last Fragment, No-
1604                                  ACK mode
1605
1606    In ACK-Always or ACK-on-Error mode, the last fragment of a SCHC
1607    Packet SHALL contain a SCHC Fragment header that conforms to the
1608    detailed format shown in Figure 17.
1609
1610   |---------- Fragment Header ----------|
1611             |-- T --|1|-- N --|
1612   +-- ... --+- ... -+-+- ... -+-- ... --+---...---+~~~~~~~~~~~~~~~~~~~~~
1613   | Rule ID | DTag  |W| 11..1 |   MIC   | payload | padding (as needed)
1614   +-- ... --+- ... -+-+- ... -+-- ... --+---...---+~~~~~~~~~~~~~~~~~~~~~
1615                         (FCN)
1616
1617    Figure 17: All-1 Fragment Detailed Format for the Last Fragment, ACK-
1618                           Always or ACK-on-Error
1619
1620
1629    The total size of the All-1 SCHC Fragment header is generally not a
1630    multiple of the L2 Word size.  The All-1 fragment being the last one
1631    of the SCHC Packet, SCHC F/R cannot freely choose the payload size to
1632    align the fragment to an L2 Word.  Therefore, padding bits are
1633    generally appended to the All-1 fragment to make it a multiple of L2
1634    Words in size.
1635
1636    The MIC MUST be computed on the payload and the padding bits.  The
1637    rationale is that the SCHC Reassembler needs to check the correctness
1638    of the reassembled SCHC packet but has no way of knowing where the
1639    payload ends.  Indeed, the latter requires decompressing the SCHC
1640    Packet.
1641
1642    An All-1 fragment payload MUST be at least the size of an L2 Word.
1643    The rationale is that the All-1 empty fragment (see Section 8.4.2.1)
1644    needs to be distinguishable from the All-1 fragment, even in the
1645    presence of padding.  This may entail saving an L2 Word from the
1646    previous fragment payload to make the payload of this All-1 fragment
1647    big enough.
1648
1649    The values for N, T and the length of MIC are not specified in this
1650    document, and SHOULD be determined in other documents (e.g.
1651    technology-specific profile documents).
1652
1653    The length of the MIC MUST be at least an L2 Word size.  The
1654    rationale is to be able to distinguish a Sender-Abort (see
1655    Section 8.4.4) from an All-1 Fragment, even in the presence of
1656    padding.
1657
1658 8.4.2.1.  All-1 empty fragment
1659
1660    The All-1 empty fragment format is an All-1 fragment format without a
1661    payload (see Figure 18).  It is used by a fragment sender, in either
1662    ACK-Always or ACK-on-Error, to request a retransmission of the SCHC
1663    ACK for the All-1 window.
1664
1665    The size of the All-1 empty fragment header is generally not a
1666    multiple of the L2 Word size.  Therefore, an All-1 empty fragment
1667    generally needs padding bits.  The padding bits are always less than
1668    an L2 Word.
1669
1670    Since an All-1 payload MUST be at least the size of an L2 Word, a
1671    receiver can distinguish an All-1 empty fragment from a regular All-1
1672    fragment, even in the presence of padding.
1673
1674
1675
1676
1685    |---------- Fragment Header --------|
1686              |-- T --|1|-- N --|
1687    +-- ... --+- ... -+-+- ... -+- ... -+~~~~~~~~~~~~~~~~~~~
1688    | Rule ID | DTag  |W|  1..1 |  MIC  | padding as needed (no payload)
1689    +-- ... --+- ... -+-+- ... -+- ... -+~~~~~~~~~~~~~~~~~~~
1690
1691
1692        Figure 18: All-1 for Retries format, also called All-1 empty
1693
1694 8.4.3.  SCHC ACK format
1695
1696    The format of a SCHC ACK that acknowledges a window that is not the
1697    last one (denoted as All-0 window) is shown in Figure 19.
1698
1699                |-- T --|1|
1700    +---- ... --+- ... -+-+---- ... -----+
1701    |  Rule ID  |  DTag |W|encoded Bitmap| (no payload)
1702    +---- ... --+- ... -+-+---- ... -----+
1703
1704
1705                   Figure 19: ACK format for All-0 windows
1706
1707    To acknowledge the last window of a packet (denoted as All-1 window),
1708    a C bit (i.e.  MIC checked) following the W bit is set to 1 to
1709    indicate that the MIC check computed by the receiver matches the MIC
1710    present in the All-1 fragment.  If the MIC check fails, the C bit is
1711    set to 0 and the Bitmap for the All-1 window follows.
1712
1713                |-- T --|1|1|
1714    +---- ... --+- ... -+-+-+
1715    |  Rule ID  |  DTag |W|1| (MIC correct)
1716    +---- ... --+- ... -+-+-+
1717
1718    +---- ... --+- ... -+-+-+----- ... -----+
1719    |  Rule ID  |  DTag |W|0|encoded Bitmap |(MIC Incorrect)
1720    +---- ... --+- ... -+-+-+----- ... -----+
1721                           C
1722
1723
1724              Figure 20: Format of a SCHC ACK for All-1 windows
1725
1726    The Rule ID and Dtag values in the SCHC ACK messages MUST be
1727    identical to the ones used in the SCHC Fragments that are being
1728    acknowledged.  This allows matching the SCHC ACK and the
1729    corresponding SCHC Fragments.
1730
1731    The Bitmap carries information on the reception of each fragment of
1732    the window as described in Section 8.2.
1741    See Appendix D for a discussion on the size of the Bitmaps.
1742
1743    In order to reduce the SCK ACK size, the Bitmap that is actually
1744    transmitted is shortened ("encoded") as explained in Section 8.4.3.1.
1745
1746 8.4.3.1.  Bitmap Encoding
1747
1748    The SCHC ACK that is transmitted is truncated by applying the
1749    following algorithm: the longest contiguous sequence of bits that
1750    starts at an L2 Word boundary of the SCHC ACK, where the bits of that
1751    sequence are all set to 1, are all part of the Bitmap and finish
1752    exactly at the end of the Bitmap, if one such sequence exists, MUST
1753    NOT be transmitted.  Because the SCHC Fragment sender knows the
1754    actual Bitmap size, it can reconstruct the original Bitmap from the
1755    shortened bitmap.
1756
1757    When shortening effectively takes place, the SCHC ACK is a multiple
1758    of L2 Words, and padding MUST NOT be appended.  When shortening does
1759    not happen, padding bits MUST be appended as needed to fill up the
1760    last L2 Word.
1761
1762    Figure 21 shows an example where L2 Words are actually bytes and
1763    where the original Bitmap contains 17 bits, the last 15 of which are
1764    all set to 1.
1765
1766    |--  SCHC ACK Header --|--------       Bitmap    --------|
1767    |  Rule ID  |  DTag  |W|1|0|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|
1768         next L2 Word boundary ->|  next L2 Word |  next L2 Word |
1769
1770
1771                       Figure 21: A non-encoded Bitmap
1772
1773    Figure 22 shows that the last 14 bits are not sent.
1774
1775                |-- T --|1|
1776    +---- ... --+- ... -+-+-+-+-+
1777    |  Rule ID  |  DTag |W|1|0|1|
1778    +---- ... --+- ... -+-+-+-+-+
1779        next L2 Word boundary ->|
1780
1781
1782                     Figure 22: Optimized Bitmap format
1783
1784    Figure 23 shows an example of a SCHC ACK with FCN ranging from 6 down
1785    to 0, where the Bitmap indicates that the second and the fifth SCHC
1786    Fragments have not been correctly received.
1787
1788
1797                           6 5 4 3 2 1 0 (*)
1798                |-- T --|1|
1799    +-----------+-------+-+-+-+-+-+-+-+-+
1800    |  Rule ID  |  DTag |W|1|0|1|1|0|1|1|            Bitmap before tx
1801    +-----------+-------+-+-+-+-+-+-+-+-+
1802    next L2 Word boundary ->|<-- L2 Word -->|
1803        (*)=(FCN values)
1804
1805    +-----------+-------+-+-+-+-+-+-+-+-+~~~+
1806    |  Rule ID  |  DTag |W|1|0|1|1|0|1|1|Pad|        Encoded Bitmap
1807    +-----------+-------+-+-+-+-+-+-+-+-+~~~+
1808    next L2 Word boundary ->|<-- L2 Word -->|
1809
1810
1811
1812         Figure 23: Example of a Bitmap before transmission, and the
1813           transmitted one, for a window that is not the last one
1814
1815    Figure 24 shows an example of a SCHC ACK with FCN ranging from 6 down
1816    to 0, where MIC check has failed but the Bitmap indicates that there
1817    is no missing SCHC Fragment.
1818
1819    |- Fragmentation Header-|6 5 4 3 2 1 7 (*)
1820                |-- T --|1|
1821    |  Rule ID  |  DTag |W|0|1|1|1|1|1|1|1|          Bitmap before tx
1822      next L2 Word boundary ->|<-- L2 Word -->|
1823                           C
1824    +---- ... --+- ... -+-+-+-+
1825    |  Rule ID  |  DTag |W|0|1|                      Encoded Bitmap
1826    +---- ... --+- ... -+-+-+-+
1827      next L2 Word boundary ->|
1828       (*) = (FCN values indicating the order)
1829
1830
1831     Figure 24: Example of the Bitmap in ACK-Always or ACK-on-Error for
1832                               the last window
1833
1834 8.4.4.  Abort formats
1835
1836    When a SCHC Fragment sender needs to abort the on-going fragmented
1837    SCHC Packet transmission, it sends a Sender-Abort.  The Sender-Abort
1838    format (see Figure 25) is a variation of the All-1 fragment, with
1839    neither a MIC nor a payload.  All-1 fragments contain at least a MIC.
1840    The absence of the MIC indicates a Sender-Abort.
1844
1853    |--- Sender-Abort Header ---|
1854    +--- ... ---+- ... -+-+-...-+~~~~~~~~~~~~~~~~~~~~~
1855    |  Rule ID  | DTag  |W| FCN | padding (as needed)
1856    +--- ... ---+- ... -+-+-...-+~~~~~~~~~~~~~~~~~~~~~
1857
1859     Figure 25: Sender-Abort format.  All FCN field bits in this format
1860                                are set to 1
1861
1862    The size of the Sender-Abort header is generally not a multiple of
1863    the L2 Word size.  Therefore, a Sender-Abort generally needs padding
1864    bits.
1865
1866    Since an All-1 fragment MIC MUST be at least the size of an L2 Word,
1867    a receiver can distinguish a Sender-Abort from an All-1 fragment,
1868    even in the presence of padding.
1869
1870    When a SCHC Fragment receiver needs to abort the on-going fragmented
1871    SCHC Packet transmission, it transmits a Receiver-Abort.  The
1872    Receiver-Abort format is a variation on the SCHC ACK format, creating
1873    an exception in the encoded Bitmap algorithm.  As shown in Figure 26,
1874    a Receiver-Abort is coded as a SCHC ACK message with a shortened
1875    Bitmap set to 1 up to the first L2 Word boundary, followed by an
1876    extra L2 Word full of 1's.  Such a message never occurs in a regular
1877    acknowledgement and is detected as a Receiver-Abort.
1878
1879    The Rule ID and Dtag values in the Receive-Abort message MUST be
1880    identical to the ones used in the fragments of the SCHC Packet the
1881    transmission of which is being aborted.
1882
1883    A Receiver-Abort is aligned to L2 Words, by design.  Therefore,
1884    padding MUST NOT be appended.
1885
1886    |- Receiver-Abort Header -|
1887
1888    +---- ... ----+-- ... --+-+-+-+-+-+-+-+-+-+-+-+-+
1889    |   Rule ID   |   DTag  |W| 1..1|      1..1     |
1890    +---- ... ----+-- ... --+-+-+-+-+-+-+-+-+-+-+-+-+
1891            next L2 Word boundary ->|<-- L2 Word -->|
1892
1894                      Figure 26: Receiver-Abort format
1895
1896    Neither the Sender-Abort nor the Receiver-Abort messages are ever
1897    acknowledged or retransmitted.
1898
1899    Use cases for the Sender-Abort and Receiver-Abort messages are
1900    explained in Section 8.5 or Appendix C.
1909 8.5.  Baseline mechanism
1910
1911    If after applying SCHC header compression (or when SCHC header
1912    compression is not possible) the SCHC Packet does not fit within the
1913    payload of a single L2 data unit, the SCHC Packet SHALL be broken
1914    into SCHC Fragments and the fragments SHALL be sent to the fragment
1915    receiver.  The fragment receiver needs to identify all the SCHC
1916    Fragments that belong to a given SCHC Packet.  To this end, the
1917    receiver SHALL use:
1918
1919    o  The sender's L2 source address (if present),
1920
1921    o  The destination's L2 address (if present),
1922
1923    o  Rule ID,
1924
1925    o  DTag (if present).
1926
1927    Then, the fragment receiver MAY determine the SCHC Fragment
1928    reliability mode that is used for this SCHC Fragment based on the
1929    Rule ID in that fragment.
1930
1931    After a SCHC Fragment reception, the receiver starts constructing the
1932    SCHC Packet.  It uses the FCN and the arrival order of each SCHC
1933    Fragment to determine the location of the individual fragments within
1934    the SCHC Packet.  For example, the receiver MAY place the fragment
1935    payload within a payload reassembly buffer at the location determined
1936    from the FCN, the arrival order of the SCHC Fragments, and the
1937    fragment payload sizes.  In ACK-on-Error or ACK-Always, the fragment
1938    receiver also uses the W bit in the received SCHC Fragments.  Note
1939    that the size of the original, unfragmented packet cannot be
1940    determined from fragmentation headers.
1941
1942    Fragmentation functionality uses the FCN value to transmit the SCHC
1943    Fragments.  It has a length of N bits where the All-1 and All-0 FCN
1944    values are used to control the fragmentation transmission.  The rest
1945    of the FCN numbers MUST be assigned sequentially in a decreasing
1946    order, the first FCN of a window is RECOMMENDED to be MAX_WIND_FCN,
1947    i.e. the highest possible FCN value depending on the FCN number of
1948    bits.
1949
1950    In all modes, the last SCHC Fragment of a packet MUST contain a MIC
1951    which is used to check if there are errors or missing SCHC Fragments
1952    and MUST use the corresponding All-1 fragment format.  Note that a
1953    SCHC Fragment with an All-0 format is considered the last SCHC
1954    Fragment of the current window.
1955
1956
1965    If the receiver receives the last fragment of a SCHC Packet (All-1),
1966    it checks for the integrity of the reassembled SCHC Packet, based on
1967    the MIC received.  In No-ACK, if the integrity check indicates that
1968    the reassembled SCHC Packet does not match the original SCHC Packet
1969    (prior to fragmentation), the reassembled SCHC Packet MUST be
1970    discarded.  In ACK-on-Error or ACK-Always, a MIC check is also
1971    performed by the fragment receiver after reception of each subsequent
1972    SCHC Fragment retransmitted after the first MIC check.
1973
1974    Notice that the SCHC ACK for the All-1 window carries one more bit
1975    (the C bit) compared to the SCHC ACKs for the previous windows.  See
1976    Appendix D for a discussion on various options to deal with this
1977    "bump" in the SCHC ACK.
1978
1979    There are three reliability modes: No-ACK, ACK-Always and ACK-on-
1980    Error.  In ACK-Always and ACK-on-Error, a jumping window protocol
1981    uses two windows alternatively, identified as 0 and 1.  A SCHC
1982    Fragment with all FCN bits set to 0 (i.e. an All-0 fragment)
1983    indicates that the window is over (i.e. the SCHC Fragment is the last
1984    one of the window) and allows to switch from one window to the next
1985    one.  The All-1 FCN in a SCHC Fragment indicates that it is the last
1986    fragment of the packet being transmitted and therefore there will not
1987    be another window for this packet.
1988
1989 8.5.1.  No-ACK
1990
1991    In the No-ACK mode, there is no feedback communication from the
1992    fragment receiver.  The sender will send all the SCHC fragments of a
1993    packet without any possibility of knowing if errors or losses have
1994    occurred.  As, in this mode, there is no need to identify specific
1995    SCHC Fragments, a one-bit FCN MAY be used.  Consequently, the FCN
1996    All-0 value is used in all SCHC fragments except the last one, which
1997    carries an All-1 FCN and the MIC.  The receiver will wait for SCHC
1998    Fragments and will set the Inactivity timer.  The receiver will use
1999    the MIC contained in the last SCHC Fragment to check for errors.
2000    When the Inactivity Timer expires or if the MIC check indicates that
2001    the reassembled packet does not match the original one, the receiver
2002    will release all resources allocated to reassembling this packet.
2003    The initial value of the Inactivity Timer will be determined based on
2004    the characteristics of the underlying LPWAN technology and will be
2005    defined in other documents (e.g. technology-specific profile
2006    documents).
2007
2008 8.5.2.  ACK-Always
2009
2010    In ACK-Always, the sender transmits SCHC Fragments by using the two-
2011    jumping-windows procedure.  A delay between each SCHC fragment can be
2012    added to respect local regulations or other constraints imposed by
2021    the applications.  Each time a SCHC fragment is sent, the FCN is
2022    decreased by one.  When the FCN reaches value 0, if there are more
2023    SCHC Fragments remaining to be sent, the sender transmits the last
2024    SCHC Fragment of this window using the All-0 fragment format.  It
2025    then starts the Retransmission Timer and waits for a SCHC ACK.
2026    Otherwise, if FCN reaches 0 and the sender transmits the last SCHC
2027    Fragment of the SCHC Packet, the sender uses the All-1 fragment
2028    format, which includes a MIC.  The sender sets the Retransmission
2029    Timer and waits for the SCHC ACK to know if transmission errors have
2030    occurred.
2031
2032    The Retransmission Timer is dimensioned based on the LPWAN technology
2033    in use.  When the Retransmission Timer expires, the sender sends an
2034    All-0 empty (resp.  All-1 empty) fragment to request again the SCHC
2035    ACK for the window that ended with the All-0 (resp.  All-1) fragment
2036    just sent.  The window number is not changed.
2037
2038    After receiving an All-0 or All-1 fragment, the receiver sends a SCHC
2039    ACK with an encoded Bitmap reporting whether any SCHC fragments have
2040    been lost or not.  When the sender receives a SCHC ACK, it checks the
2041    W bit carried by the SCHC ACK.  Any SCHC ACK carrying an unexpected W
2042    bit value is discarded.  If the W bit value of the received SCHC ACK
2043    is correct, the sender analyzes the rest of the SCHC ACK message,
2044    such as the encoded Bitmap and the MIC.  If all the SCHC Fragments
2045    sent for this window have been well received, and if at least one
2046    more SCHC Fragment needs to be sent, the sender advances its sending
2047    window to the next window value and sends the next SCHC Fragments.
2048    If no more SCHC Fragments have to be sent, then the fragmented SCHC
2049    Packet transmission is finished.
2050
2051    However, if one or more SCHC Fragments have not been received as per
2052    the SCHC ACK (i.e. the corresponding bits are not set in the encoded
2053    Bitmap) then the sender resends the missing SCHC Fragments.  When all
2054    missing SCHC Fragments have been retransmitted, the sender starts the
2055    Retransmission Timer, even if an All-0 or an All-1 has not been sent
2056    as part of this retransmission and waits for a SCHC ACK.  Upon
2057    receipt of the SCHC ACK, if one or more SCHC Fragments have not yet
2058    been received, the counter Attempts is increased and the sender
2059    resends the missing SCHC Fragments again.  When Attempts reaches
2060    MAX_ACK_REQUESTS, the sender aborts the on-going fragmented SCHC
2061    Packet transmission by sending a Sender-Abort message and releases
2062    any resources for transmission of the packet.  The sender also aborts
2063    an on-going fragmented SCHC Packet transmission when a failed MIC
2064    check is reported by the receiver or when a SCHC Fragment that has
2065    not been sent is reported in the encoded Bitmap.
2066
2067    On the other hand, at the beginning, the receiver side expects to
2068    receive window 0.  Any SCHC Fragment received but not belonging to
2077    the current window is discarded.  All SCHC Fragments belonging to the
2078    correct window are accepted, and the actual SCHC Fragment number
2079    managed by the receiver is computed based on the FCN value.  The
2080    receiver prepares the encoded Bitmap to report the correctly received
2081    and the missing SCHC Fragments for the current window.  After each
2082    SCHC Fragment is received, the receiver initializes the Inactivity
2083    Timer.  When the Inactivity Timer expires, the transmission is
2084    aborted by the receiver sending a Receiver-Abort message.
2085
2086    When an All-0 fragment is received, it indicates that all the SCHC
2087    Fragments have been sent in the current window.  Since the sender is
2088    not obliged to always send a full window, some SCHC Fragment number
2089    not set in the receiver memory may not correspond to losses.  The
2090    receiver sends the corresponding SCHC ACK, the Inactivity Timer is
2091    set and the transmission of the next window by the sender can start.
2092
2093    If an All-0 fragment has been received and all SCHC Fragments of the
2094    current window have also been received, the receiver then expects a
2095    new Window and waits for the next SCHC Fragment.  Upon receipt of a
2096    SCHC Fragment, if the window value has not changed, the received SCHC
2097    Fragments are part of a retransmission.  A receiver that has already
2098    received a SCHC Fragment SHOULD discard it, otherwise, it updates the
2099    Bitmap.  If all the bits of the Bitmap are set to one, the receiver
2100    MUST send a SCHC ACK without waiting for an All-0 fragment and the
2101    Inactivity Timer is initialized.
2102
2103    On the other hand, if the window value of the next received SCHC
2104    Fragment is set to the next expected window value, this means that
2105    the sender has received a correct encoded Bitmap reporting that all
2106    SCHC Fragments have been received.  The receiver then updates the
2107    value of the next expected window.
2108
2109    When an All-1 fragment is received, it indicates that the last SCHC
2110    Fragment of the packet has been sent.  Since the last window is not
2111    always full, the MIC will be used by the receiver to detect if all
2112    SCHC Fragments of the packet have been received.  A correct MIC
2113    indicates the end of the transmission but the receiver MUST stay
2114    alive for an Inactivity Timer period to answer to any empty All-1
2115    fragments the sender MAY send if SCHC ACKs sent by the receiver are
2116    lost.  If the MIC is incorrect, some SCHC Fragments have been lost.
2117    The receiver sends the SCHC ACK regardless of successful fragmented
2118    SCHC Packet reception or not, the Inactitivity Timer is set.  In case
2119    of an incorrect MIC, the receiver waits for SCHC Fragments belonging
2120    to the same window.  After MAX_ACK_REQUESTS, the receiver will abort
2121    the on-going fragmented SCHC Packet transmission by transmitting a
2122    the Receiver-Abort format.  The receiver also aborts upon Inactivity
2123    Timer expiration by sending a Receiver-Abort message.
2124
2133    If the sender receives a SCK ACK with a Bitmap containing a bit set
2134    for a SCHC Fragment that it has not sent during the transmission
2135    phase of this window, it MUST abort the whole fragmentation and
2136    transmission of this SCHC Packet.
2137
2138 8.5.3.  ACK-on-Error
2139
2140    The senders behavior for ACK-on-Error and ACK-Always are similar.
2141    The main difference is that in ACK-on-Error the SCHC ACK with the
2142    encoded Bitmap is not sent at the end of each window but only when at
2143    least one SCHC Fragment of the current window has been lost.  Except
2144    for the last window where a SCHC ACK MUST be sent to finish the
2145    transmission.
2146
2147    In ACK-on-Error, the Retransmission Timer expiration is considered as
2148    a positive acknowledgement for all windows but the last one.  This
2149    timer is set after sending an All-0 or an All-1 fragment.  For an
2150    All-0 fragment, on timer expiration, the sender resumes operation and
2151    sends the SCHC Fragments of the next window.
2152
2153    If the sender receives a SCHC ACK, it checks the window value.  SCHC
2154    ACKs with an unexpected window number are discarded.  If the window
2155    number in the received SCHC ACK is correct, the sender verifies if
2156    the receiver has received all SCHC fragments of the current window.
2157    When at least one SCHC Fragment has been lost, the counter Attempts
2158    is increased by one and the sender resends the missing SCHC Fragments
2159    again.  When Attempts reaches MAX_ACK_REQUESTS, the sender sends a
2160    Sender-Abort message and releases all resources for the on-going
2161    fragmented SCHC Packet transmission.  When the retransmission of the
2162    missing SCHC Fragments is finished, the sender starts listening for a
2163    SCHC ACK (even if an All-0 or an All-1 has not been sent during the
2164    retransmission) and initializes the Retransmission Timer.
2165
2166    After sending an All-1 fragment, the sender listens for a SCHC ACK,
2167    initializes Attempts, and starts the Retransmission Timer.  If the
2168    Retransmission Timer expires, Attempts is increased by one and an
2169    empty All-1 fragment is sent to request the SCHC ACK for the last
2170    window.  If Attempts reaches MAX_ACK_REQUESTS, the sender aborts the
2171    on-going fragmented SCHC Packet transmission by transmitting the
2172    Sender-Abort fragment.
2173
2174    At the end of any window, if the sender receives a SCK ACK with a
2175    Bitmap containing a bit set for a SCHC Fragment that it has not sent
2176    during the transmission phase of that window, it MUST abort the whole
2177    fragmentation and transmission of this SCHC Packet.
2178
2179    Unlike the sender, the receiver for ACK-on-Error has a larger amount
2180    of differences compared with ACK-Always.  First, a SCHC ACK is not
2189    sent unless there is a lost SCHC Fragment or an unexpected behavior.
2190    With the exception of the last window, where a SCHC ACK is always
2191    sent regardless of SCHC Fragment losses or not.  The receiver starts
2192    by expecting SCHC Fragments from window 0 and maintains the
2193    information regarding which SCHC Fragments it receives.  After
2194    receiving a SCHC Fragment, the Inactivity Timer is set.  If no
2195    further SCHC Fragment are received and the Inactivity Timer expires,
2196    the SCHC Fragment receiver aborts the on-going fragmented SCHC Packet
2197    transmission by transmitting the Receiver-Abort data unit.
2198
2199    Any SCHC Fragment not belonging to the current window is discarded.
2200    The actual SCHC Fragment number is computed based on the FCN value.
2201    When an All-0 fragment is received and all SCHC Fragments have been
2202    received, the receiver updates the expected window value and expects
2203    a new window and waits for the next SCHC Fragment.
2204    If the window value of the next SCHC Fragment has not changed, the
2205    received SCHC Fragment is a retransmission.  A receiver that has
2206    already received a Fragment discard it.  If all SCHC Fragments of a
2207    window (that is not the last one) have been received, the receiver
2208    does not send a SCHC ACK.  While the receiver waits for the next
2209    window and if the window value is set to the next value, and if an
2210    All-1 fragment with the next value window arrived the receiver knows
2211    that the last SCHC Fragment of the packet has been sent.  Since the
2212    last window is not always full, the MIC will be used to detect if all
2213    SCHC Fragments of the window have been received.  A correct MIC check
2214    indicates the end of the fragmented SCHC Packet transmission.  An ACK
2215    is sent by the SCHC Fragment receiver.  In case of an incorrect MIC,
2216    the receiver waits for SCHC Fragments belonging to the same window or
2217    the expiration of the Inactivity Timer.  The latter will lead the
2218    receiver to abort the on-going SCHC fragmented packet transmission by
2219    transmitting the Receiver-Abort message.
2220
2221    If, after receiving an All-0 fragment the receiver missed some SCHC
2222    Fragments, the receiver uses a SCHC ACK with the encoded Bitmap to
2223    ask the retransmission of the missing fragments and expect to receive
2224    SCHC Fragments with the actual window.  While waiting the
2225    retransmission an All-0 empty fragment is received, the receiver
2226    sends again the SCHC ACK with the encoded Bitmap, if the SCHC
2227    Fragments received belongs to another window or an All-1 fragment is
2228    received, the transmission is aborted by sending a Receiver-Abort
2229    fragment.  Once it has received all the missing fragments it waits
2230    for the next window fragments.
2231
2232 8.6.  Supporting multiple window sizes
2233
2234    For ACK-Always or ACK-on-Error, implementers MAY opt to support a
2235    single window size or multiple window sizes.  The latter, when
2236    feasible, may provide performance optimizations.  For example, a
2245    large window size SHOULD be used for packets that need to be carried
2246    by a large number of SCHC Fragments.  However, when the number of
2247    SCHC Fragments required to carry a packet is low, a smaller window
2248    size, and thus a shorter Bitmap, MAY be sufficient to provide
2249    feedback on all SCHC Fragments.  If multiple window sizes are
2250    supported, the Rule ID MAY be used to signal the window size in use
2251    for a specific packet transmission.
2252
2253    Note that the same window size MUST be used for the transmission of
2254    all SCHC Fragments that belong to the same SCHC Packet.
2255
2256 8.7.  Downlink SCHC Fragment transmission
2257
2258    In some LPWAN technologies, as part of energy-saving techniques,
2259    downlink transmission is only possible immediately after an uplink
2260    transmission.  In order to avoid potentially high delay in the
2261    downlink transmission of a fragmented SCHC Packet, the SCHC Fragment
2262    receiver MAY perform an uplink transmission as soon as possible after
2263    reception of a SCHC Fragment that is not the last one.  Such uplink
2264    transmission MAY be triggered by the L2 (e.g. an L2 ACK sent in
2265    response to a SCHC Fragment encapsulated in a L2 frame that requires
2266    an L2 ACK) or it MAY be triggered from an upper layer.
2267
2268    For downlink transmission of a fragmented SCHC Packet in ACK-Always
2269    mode, the SCHC Fragment receiver MAY support timer-based SCHC ACK
2270    retransmission.  In this mechanism, the SCHC Fragment receiver
2271    initializes and starts a timer (the Inactivity Timer is used) after
2272    the transmission of a SCHC ACK, except when the SCHC ACK is sent in
2273    response to the last SCHC Fragment of a packet (All-1 fragment).  In
2274    the latter case, the SCHC Fragment receiver does not start a timer
2275    after transmission of the SCHC ACK.
2276
2277    If, after transmission of a SCHC ACK that is not an All-1 fragment,
2278    and before expiration of the corresponding Inactivity timer, the SCHC
2279    Fragment receiver receives a SCHC Fragment that belongs to the
2280    current window (e.g. a missing SCHC Fragment from the current window)
2281    or to the next window, the Inactivity timer for the SCHC ACK is
2282    stopped.  However, if the Inactivity timer expires, the SCHC ACK is
2283    resent and the Inactivity timer is reinitialized and restarted.
2284
2285    The default initial value for the Inactivity timer, as well as the
2286    maximum number of retries for a specific SCHC ACK, denoted
2287    MAX_ACK_RETRIES, are not defined in this document, and need to be
2288    defined in other documents (e.g. technology-specific profiles).  The
2289    initial value of the Inactivity timer is expected to be greater than
2290    that of the Retransmission timer, in order to make sure that a
2291    (buffered) SCHC Fragment to be retransmitted can find an opportunity
2292    for that transmission.
2301    When the SCHC Fragment sender transmits the All-1 fragment, it starts
2302    its Retransmission Timer with a large timeout value (e.g. several
2303    times that of the initial Inactivity timer).  If a SCHC ACK is
2304    received before expiration of this timer, the SCHC Fragment sender
2305    retransmits any lost SCHC Fragments reported by the SCHC ACK, or if
2306    the SCHC ACK confirms successful reception of all SCHC Fragments of
2307    the last window, the transmission of the fragmented SCHC Packet is
2308    considered complete.  If the timer expires, and no SCHC ACK has been
2309    received since the start of the timer, the SCHC Fragment sender
2310    assumes that the All-1 fragment has been successfully received (and
2311    possibly, the last SCHC ACK has been lost: this mechanism assumes
2312    that the retransmission timer for the All-1 fragment is long enough
2313    to allow several SCHC ACK retries if the All-1 fragment has not;been
2314    received by the SCHC Fragment receiver, and it also assumes that it
2315    is unlikely that several ACKs become all lost).
2316
2317 9.  Padding management
2318
2319    SCHC C/D and SCHC F/R operate on bits, not bytes.  SCHC itself does
2320    not have any alignment prerequisite.  If the Layer 2 below SCHC
2321    constrains the L2 Data Unit to align to some boundary, called L2
2322    Words (for example, bytes), SCHC will meet that constraint and
2323    produce messages with the correct alignement.  This may entail adding
2324    extra bits (called padding bits).
2325
2326    When padding occurs, the number of appended bits is strictly less
2327    than the L2 Word size.
2328
2329    Padding happens at most once for each Packet going through the full
2330    SCHC chain, i.e. Compression and (optionally) SCHC Fragmentation (see
2331    Figure 2).  If a SCHC Packet is sent unfragmented (see Figure 27), it
2332    is padded as needed.  If a SCHC Packet is fragmented, only the last
2333    fragment is padded as needed.
2334
2348
2357    A packet (e.g. an IPv6 packet)
2358             |                                           ^ (padding bits
2359             v                                           |       dropped)
2360    +------------------+                      +--------------------+
2361    | SCHC Compression |                      | SCHC Decompression |
2362    +------------------+                      +--------------------+
2363             |                                           ^
2364             |   If no fragmentation                     |
2365             +---- SCHC Packet + padding as needed ----->|
2366             |                                           | (MIC checked
2367             v                                           |  and removed)
2368    +--------------------+                       +-----------------+
2369    | SCHC Fragmentation |                       | SCHC Reassembly |
2370    +--------------------+                       +-----------------+
2371         |       ^                                   |       ^
2372         |       |                                   |       |
2373         |       +------------- SCHC ACK ------------+       |
2374         |                                                   |
2375         +--------------- SCHC Fragments --------------------+
2376         +--- last SCHC Frag with MIC + padding as needed ---+
2377
2378            SENDER                                    RECEIVER
2379
2382           Figure 27: SCHC operations, including padding as needed
2383
2384    Each technology-specific document MUST specify the size of the L2
2385    Word.  The L2 Word might actually be a single bit, in which case at
2386    most zero bits of padding will be appended to any message, i.e. no
2387    padding will take place at all.
2388
2389 10.  SCHC Compression for IPv6 and UDP headers
2390
2391    This section lists the different IPv6 and UDP header fields and how
2392    they can be compressed.
2393
2394 10.1.  IPv6 version field
2395
2396    This field always holds the same value.  Therefore, in the Rule, TV
2397    is set to 6, MO to "equal" and CDA to "not-sent".
2398
2399 10.2.  IPv6 Traffic class field
2400
2401    If the DiffServ field does not vary and is known by both sides, the
2402    Field Descriptor in the Rule SHOULD contain a TV with this well-known
2403    value, an "equal" MO and a "not-sent" CDA.
2404
2413    Otherwise, two possibilities can be considered depending on the
2414    variability of the value:
2415
2416    o  One possibility is to not compress the field and send the original
2417       value.  In the Rule, TV is not set to any particular value, MO is
2418       set to "ignore" and CDA is set to "value-sent".
2419
2420    o  If some upper bits in the field are constant and known, a better
2421       option is to only send the LSBs.  In the Rule, TV is set to a
2422       value with the stable known upper part, MO is set to MSB(x) and
2423       CDA to LSB(y).
2424
2425 10.3.  Flow label field
2426
2427    If the Flow Label field does not vary and is known by both sides, the
2428    Field Descriptor in the Rule SHOULD contain a TV with this well-known
2429    value, an "equal" MO and a "not-sent" CDA.
2430
2431    Otherwise, two possibilities can be considered:
2432
2433    o  One possibility is to not compress the field and send the original
2434       value.  In the Rule, TV is not set to any particular value, MO is
2435       set to "ignore" and CDA is set to "value-sent".
2436
2437    o  If some upper bits in the field are constant and known, a better
2438       option is to only send the LSBs.  In the Rule, TV is set to a
2439       value with the stable known upper part, MO is set to MSB(x) and
2440       CDA to LSB(y).
2441
2442 10.4.  Payload Length field
2443
2444    This field can be elided for the transmission on the LPWAN network.
2445    The SCHC C/D recomputes the original payload length value.  In the
2446    Field Descriptor, TV is not set, MO is set to "ignore" and CDA is
2447    "compute-IPv6-length".
2448
2449    If the payload length needs to be sent and does not need to be coded
2450    in 16 bits, the TV can be set to 0x0000, the MO set to MSB(16-s)
2451    where 's' is the number of bits to code the maximum length, and CDA
2452    is set to LSB(s).
2453
2454 10.5.  Next Header field
2455
2456    If the Next Header field does not vary and is known by both sides,
2457    the Field Descriptor in the Rule SHOULD contain a TV with this Next
2458    Header value, the MO SHOULD be "equal" and the CDA SHOULD be "not-
2459    sent".
2460
2469    Otherwise, TV is not set in the Field Descriptor, MO is set to
2470    "ignore" and CDA is set to "value-sent".  Alternatively, a matching-
2471    list MAY also be used.
2472
2473 10.6.  Hop Limit field
2474
2475    The field behavior for this field is different for Uplink and
2476    Downlink.  In Uplink, since there is no IP forwarding between the Dev
2477    and the SCHC C/D, the value is relatively constant.  On the other
2478    hand, the Downlink value depends of Internet routing and MAY change
2479    more frequently.  One neat way of processing this field is to use the
2480    Direction Indicator (DI) to distinguish both directions:
2481
2482    o  in the Uplink, elide the field: the TV in the Field Descriptor is
2483       set to the known constant value, the MO is set to "equal" and the
2484       CDA is set to "not-sent".
2485
2486    o  in the Downlink, send the value: TV is not set, MO is set to
2487       "ignore" and CDA is set to "value-sent".
2488
2489 10.7.  IPv6 addresses fields
2490
2491    As in 6LoWPAN [RFC4944], IPv6 addresses are split into two 64-bit
2492    long fields; one for the prefix and one for the Interface Identifier
2493    (IID).  These fields SHOULD be compressed.  To allow for a single
2494    Rule being used for both directions, these values are identified by
2495    their role (DEV or APP) and not by their position in the frame
2496    (source or destination).
2497
2498 10.7.1.  IPv6 source and destination prefixes
2499
2500    Both ends MUST be synchronized with the appropriate prefixes.  For a
2501    specific flow, the source and destination prefixes can be unique and
2502    stored in the context.  It can be either a link-local prefix or a
2503    global prefix.  In that case, the TV for the source and destination
2504    prefixes contain the values, the MO is set to "equal" and the CDA is
2505    set to "not-sent".
2506
2507    If the Rule is intended to compress packets with different prefix
2508    values, match-mapping SHOULD be used.  The different prefixes are
2509    listed in the TV, the MO is set to "match-mapping" and the CDA is set
2510    to "mapping-sent".  See Figure 29
2511
2512    Otherwise, the TV contains the prefix, the MO is set to "equal" and
2513    the CDA is set to "value-sent".
2514
2515
2516
2525 10.7.2.  IPv6 source and destination IID
2526
2527    If the DEV or APP IID are based on an LPWAN address, then the IID can
2528    be reconstructed with information coming from the LPWAN header.  In
2529    that case, the TV is not set, the MO is set to "ignore" and the CDA
2530    is set to "DevIID" or "AppIID".  Note that the LPWAN technology
2531    generally carries a single identifier corresponding to the DEV.
2532    Therefore AppIID cannot be used.
2533
2534    For privacy reasons or if the DEV address is changing over time, a
2535    static value that is not equal to the DEV address SHOULD be used.  In
2536    that case, the TV contains the static value, the MO operator is set
2537    to "equal" and the CDF is set to "not-sent".  [RFC7217] provides some
2538    methods that MAY be used to derive this static identifier.
2539
2540    If several IIDs are possible, then the TV contains the list of
2541    possible IIDs, the MO is set to "match-mapping" and the CDA is set to
2542    "mapping-sent".
2543
2544    It MAY also happen that the IID variability only expresses itself on
2545    a few bytes.  In that case, the TV is set to the stable part of the
2546    IID, the MO is set to "MSB" and the CDA is set to "LSB".
2547
2548    Finally, the IID can be sent in extenso on the LPWAN.  In that case,
2549    the TV is not set, the MO is set to "ignore" and the CDA is set to
2550    "value-sent".
2551
2552 10.8.  IPv6 extensions
2553
2554    No Rule is currently defined that processes IPv6 extensions.  If such
2555    extensions are needed, their compression/decompression Rules can be
2556    based on the MOs and CDAs described above.
2557
2558 10.9.  UDP source and destination port
2559
2560    To allow for a single Rule being used for both directions, the UDP
2561    port values are identified by their role (DEV or APP) and not by
2562    their position in the frame (source or destination).  The SCHC C/D
2563    MUST be aware of the traffic direction (Uplink, Downlink) to select
2564    the appropriate field.  The following Rules apply for DEV and APP
2565    port numbers.
2566
2567    If both ends know the port number, it can be elided.  The TV contains
2568    the port number, the MO is set to "equal" and the CDA is set to "not-
2569    sent".
2570
2571
2572
2581    If the port variation is on few bits, the TV contains the stable part
2582    of the port number, the MO is set to "MSB" and the CDA is set to
2583    "LSB".
2584
2585    If some well-known values are used, the TV can contain the list of
2586    these values, the MO is set to "match-mapping" and the CDA is set to
2587    "mapping-sent".
2588
2589    Otherwise the port numbers are sent over the LPWAN.  The TV is not
2590    set, the MO is set to "ignore" and the CDA is set to "value-sent".
2591
2592 10.10.  UDP length field
2593
2594    The UDP length can be computed from the received data.  In that case,
2595    the TV is not set, the MO is set to "ignore" and the CDA is set to
2596    "compute-length".
2597
2598    If the payload is small, the TV can be set to 0x0000, the MO set to
2599    "MSB" and the CDA to "LSB".
2600
2601    In other cases, the length SHOULD be sent and the CDA is replaced by
2602    "value-sent".
2603
2604 10.11.  UDP Checksum field
2605
2606    The UDP checksum operation is mandatory with IPv6 [RFC8200] for most
2607    packets but recognizes that there are exceptions to that default
2608    behavior.
2609
2610    For instance, protocols that use UDP as a tunnel encapsulation may
2611    enable zero-checksum mode for a specific port (or set of ports) for
2612    sending and/or receiving.  [RFC8200] also stipulates that any node
2613    implementing zero-checksum mode must follow the requirements
2614    specified in "Applicability Statement for the Use of IPv6 UDP
2615    Datagrams with Zero Checksums" [RFC6936].
2616
2617    6LoWPAN Header Compression [RFC6282] also authorizes to send UDP
2618    datagram that are deprived of the checksum protection when an upper
2619    layer guarantees the integrity of the UDP payload and pseudo-header
2620    all the way between the compressor that elides the UDP checksum and
2621    the decompressor that computes again it.  A specific example of this
2622    is when a Message Integrity Check (MIC) protects the compressed
2623    message all along that path with a strength that is identical or
2624    better to the UDP checksum.
2625
2626    In a similar fashion, this specification allows a SCHC compressor to
2627    elide the UDP checks when another layer guarantees an identical or
2628    better integrity protection for the UDP payload and the pseudo-
2637    header.  In this case, the TV is not set, the MO is set to "ignore"
2638    and the CDA is set to "compute-checksum".
2639
2640    In particular, when SCHC fragmentation is used, a fragmentation MIC
2641    of 2 bytes or more provides equal or better protection than the UDP
2642    checksum; in that case, if the compressor is collocated with the
2643    fragmentation point and the decompressor is collocated with the
2644    packet reassembly point, then compressor MAY elide the UDP checksum.
2645    Whether and when the UDP Checksum is elided is to be specified in the
2646    technology-specific documents.
2647
2648    Since the compression happens before the fragmentation, implementors
2649    should understand the risks when dealing with unprotected data below
2650    the transport layer and take special care when manipulating that
2651    data.
2652
2653    In other cases, the checksum SHOULD be explicitly sent.  The TV is
2654    not set, the MO is set to "ignore" and the CDA is set to "value-
2655    sent".
2656
2657 11.  IANA Considerations
2658
2659    This document has no request to IANA.
2660
2661 12.  Security considerations
2662
2663 12.1.  Security considerations for SCHC Compression/Decompression
2664
2665    A malicious header compression could cause the reconstruction of a
2666    wrong packet that does not match with the original one.  Such a
2667    corruption MAY be detected with end-to-end authentication and
2668    integrity mechanisms.  Header Compression does not add more security
2669    problem than what is already needed in a transmission.  For instance,
2670    to avoid an attack, never re-construct a packet bigger than some
2671    configured size (with 1500 bytes as generic default).
2672
2673 12.2.  Security considerations for SCHC Fragmentation/Reassembly
2674
2675    This subsection describes potential attacks to LPWAN SCHC F/R and
2676    suggests possible countermeasures.
2677
2678    A node can perform a buffer reservation attack by sending a first
2679    SCHC Fragment to a target.  Then, the receiver will reserve buffer
2680    space for the IPv6 packet.  Other incoming fragmented SCHC Packets
2681    will be dropped while the reassembly buffer is occupied during the
2682    reassembly timeout.  Once that timeout expires, the attacker can
2683    repeat the same procedure, and iterate, thus creating a denial of
2684    service attack.  The (low) cost to mount this attack is linear with
2693    the number of buffers at the target node.  However, the cost for an
2694    attacker can be increased if individual SCHC Fragments of multiple
2695    packets can be stored in the reassembly buffer.  To further increase
2696    the attack cost, the reassembly buffer can be split into SCHC
2697    Fragment-sized buffer slots.  Once a packet is complete, it is
2698    processed normally.  If buffer overload occurs, a receiver can
2699    discard packets based on the sender behavior, which MAY help identify
2700    which SCHC Fragments have been sent by an attacker.
2701
2702    In another type of attack, the malicious node is required to have
2703    overhearing capabilities.  If an attacker can overhear a SCHC
2704    Fragment, it can send a spoofed duplicate (e.g. with random payload)
2705    to the destination.  If the LPWAN technology does not support
2706    suitable protection (e.g. source authentication and frame counters to
2707    prevent replay attacks), a receiver cannot distinguish legitimate
2708    from spoofed SCHC Fragments.  Therefore, the original IPv6 packet
2709    will be considered corrupt and will be dropped.  To protect resource-
2710    constrained nodes from this attack, it has been proposed to establish
2711    a binding among the SCHC Fragments to be transmitted by a node, by
2712    applying content-chaining to the different SCHC Fragments, based on
2713    cryptographic hash functionality.  The aim of this technique is to
2714    allow a receiver to identify illegitimate SCHC Fragments.
2715
2716    Further attacks MAY involve sending overlapped fragments (i.e.
2717    comprising some overlapping parts of the original IPv6 datagram).
2718    Implementers SHOULD make sure that the correct operation is not
2719    affected by such event.
2720
2721    In ACK-on-Error, a malicious node MAY force a SCHC Fragment sender to
2722    resend a SCHC Fragment a number of times, with the aim to increase
2723    consumption of the SCHC Fragment sender's resources.  To this end,
2724    the malicious node MAY repeatedly send a fake ACK to the SCHC
2725    Fragment sender, with a Bitmap that reports that one or more SCHC
2726    Fragments have been lost.  In order to mitigate this possible attack,
2727    MAX_ACK_RETRIES MAY be set to a safe value which allows to limit the
2728    maximum damage of the attack to an acceptable extent.  However, note
2729    that a high setting for MAX_ACK_RETRIES benefits SCHC Fragment
2730    reliability modes, therefore the trade-off needs to be carefully
2731    considered.
2732
2733 13.  Acknowledgements
2734
2735    Thanks to Carsten Bormann, Philippe Clavier, Eduardo Ingles Sanchez,
2736    Arunprabhu Kandasamy, Rahul Jadhav, Sergio Lopez Bernal, Antony
2737    Markovski, Alexander Pelov, Pascal Thubert, Juan Carlos Zuniga, Diego
2738    Dujovne, Edgar Ramos, and Shoichi Sakane for useful design
2739    consideration and comments.
2740
2749 14.  References
2750
2751 14.1.  Normative References
2752
2753    [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
2754               Requirement Levels", BCP 14, RFC 2119,
2755               DOI 10.17487/RFC2119, March 1997,
2756               <https://www.rfc-editor.org/info/rfc2119>.
2757
2758    [RFC7217]  Gont, F., "A Method for Generating Semantically Opaque
2759               Interface Identifiers with IPv6 Stateless Address
2760               Autoconfiguration (SLAAC)", RFC 7217,
2761               DOI 10.17487/RFC7217, April 2014,
2762               <https://www.rfc-editor.org/info/rfc7217>.
2763
2764    [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
2765               2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
2766               May 2017, <https://www.rfc-editor.org/info/rfc8174>.
2767
2768 14.2.  Informative References
2769
2770    [RFC3385]  Sheinwald, D., Satran, J., Thaler, P., and V. Cavanna,
2771               "Internet Protocol Small Computer System Interface (iSCSI)
2772               Cyclic Redundancy Check (CRC)/Checksum Considerations",
2773               RFC 3385, DOI 10.17487/RFC3385, September 2002,
2774               <https://www.rfc-editor.org/info/rfc3385>.
2775
2776    [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,
2777               "Transmission of IPv6 Packets over IEEE 802.15.4
2778               Networks", RFC 4944, DOI 10.17487/RFC4944, September 2007,
2779               <https://www.rfc-editor.org/info/rfc4944>.
2780
2781    [RFC5795]  Sandlund, K., Pelletier, G., and L-E. Jonsson, "The RObust
2782               Header Compression (ROHC) Framework", RFC 5795,
2783               DOI 10.17487/RFC5795, March 2010,
2784               <https://www.rfc-editor.org/info/rfc5795>.
2785
2786    [RFC6282]  Hui, J., Ed. and P. Thubert, "Compression Format for IPv6
2787               Datagrams over IEEE 802.15.4-Based Networks", RFC 6282,
2788               DOI 10.17487/RFC6282, September 2011,
2789               <https://www.rfc-editor.org/info/rfc6282>.
2790
2791    [RFC6936]  Fairhurst, G. and M. Westerlund, "Applicability Statement
2792               for the Use of IPv6 UDP Datagrams with Zero Checksums",
2793               RFC 6936, DOI 10.17487/RFC6936, April 2013,
2794               <https://www.rfc-editor.org/info/rfc6936>.
2795
2796
2805    [RFC7136]  Carpenter, B. and S. Jiang, "Significance of IPv6
2806               Interface Identifiers", RFC 7136, DOI 10.17487/RFC7136,
2807               February 2014, <https://www.rfc-editor.org/info/rfc7136>.
2808
2809    [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
2810               (IPv6) Specification", STD 86, RFC 8200,
2811               DOI 10.17487/RFC8200, July 2017,
2812               <https://www.rfc-editor.org/info/rfc8200>.
2813
2814    [RFC8376]  Farrell, S., Ed., "Low-Power Wide Area Network (LPWAN)
2815               Overview", RFC 8376, DOI 10.17487/RFC8376, May 2018,
2816               <https://www.rfc-editor.org/info/rfc8376>.
2817
2818 Appendix A.  SCHC Compression Examples
2819
2820    This section gives some scenarios of the compression mechanism for
2821    IPv6/UDP.  The goal is to illustrate the behavior of SCHC.
2822
2823    The most common case using the mechanisms defined in this document
2824    will be a LPWAN Dev that embeds some applications running over CoAP.
2825    In this example, three flows are considered.  The first flow is for
2826    the device management based on CoAP using Link Local IPv6 addresses
2827    and UDP ports 123 and 124 for Dev and App, respectively.  The second
2828    flow will be a CoAP server for measurements done by the Device (using
2829    ports 5683) and Global IPv6 Address prefixes alpha::IID/64 to
2830    beta::1/64.  The last flow is for legacy applications using different
2831    ports numbers, the destination IPv6 address prefix is gamma::1/64.
2832
2833    Figure 28 presents the protocol stack for this Device.  IPv6 and UDP
2834    are represented with dotted lines since these protocols are
2835    compressed on the radio link.
2836
2837
2838
2839
2840
2841
2842
2843
2844
2845
2846
2847
2848
2849
2850
2851
2852
2861     Management   Data
2862    +----------+---------+---------+
2863    |   CoAP   |  CoAP   | legacy  |
2864    +----||----+---||----+---||----+
2865    .   UDP    .  UDP    |   UDP   |
2866    ................................
2867    .   IPv6   .  IPv6   .  IPv6   .
2868    +------------------------------+
2869    |    SCHC Header compression   |
2870    |      and fragmentation       |
2871    +------------------------------+
2872    |      LPWAN L2 technologies   |
2873    +------------------------------+
2874             DEV or NGW
2875
2876
2877               Figure 28: Simplified Protocol Stack for LP-WAN
2878
2879    Note that in some LPWAN technologies, only the Devs have a device ID.
2880    Therefore, when such technologies are used, it is necessary to
2881    statically define an IID for the Link Local address for the SCHC C/D.
2882
2883    Rule 0
2884     +----------------+--+--+--+---------+--------+------------++------+
2885     | Field          |FL|FP|DI| Value   | Match  | Comp Decomp|| Sent |
2886     |                |  |  |  |         | Opera. | Action     ||[bits]|
2887     +----------------+--+--+--+---------+---------------------++------+
2888     |IPv6 version    |4 |1 |Bi|6        | equal  | not-sent   ||      |
2889     |IPv6 DiffServ   |8 |1 |Bi|0        | equal  | not-sent   ||      |
2890     |IPv6 Flow Label |20|1 |Bi|0        | equal  | not-sent   ||      |
2891     |IPv6 Length     |16|1 |Bi|         | ignore | comp-length||      |
2892     |IPv6 Next Header|8 |1 |Bi|17       | equal  | not-sent   ||      |
2893     |IPv6 Hop Limit  |8 |1 |Bi|255      | ignore | not-sent   ||      |
2894     |IPv6 DEVprefix  |64|1 |Bi|FE80::/64| equal  | not-sent   ||      |
2895     |IPv6 DevIID     |64|1 |Bi|         | ignore | DevIID     ||      |
2896     |IPv6 APPprefix  |64|1 |Bi|FE80::/64| equal  | not-sent   ||      |
2897     |IPv6 AppIID     |64|1 |Bi|::1      | equal  | not-sent   ||      |
2898     +================+==+==+==+=========+========+============++======+
2899     |UDP DEVport     |16|1 |Bi|123      | equal  | not-sent   ||      |
2900     |UDP APPport     |16|1 |Bi|124      | equal  | not-sent   ||      |
2901     |UDP Length      |16|1 |Bi|         | ignore | comp-length||      |
2902     |UDP checksum    |16|1 |Bi|         | ignore | comp-chk   ||      |
2903     +================+==+==+==+=========+========+============++======+
2904
2905     Rule 1
2906     +----------------+--+--+--+---------+--------+------------++------+
2907     | Field          |FL|FP|DI| Value   | Match  | Action     || Sent |
2908     |                |  |  |  |         | Opera. | Action     ||[bits]|
2917     +----------------+--+--+--+---------+--------+------------++------+
2918     |IPv6 version    |4 |1 |Bi|6        | equal  | not-sent   ||      |
2919     |IPv6 DiffServ   |8 |1 |Bi|0        | equal  | not-sent   ||      |
2920     |IPv6 Flow Label |20|1 |Bi|0        | equal  | not-sent   ||      |
2921     |IPv6 Length     |16|1 |Bi|         | ignore | comp-length||      |
2922     |IPv6 Next Header|8 |1 |Bi|17       | equal  | not-sent   ||      |
2923     |IPv6 Hop Limit  |8 |1 |Bi|255      | ignore | not-sent   ||      |
2924     |IPv6 DEVprefix  |64|1 |Bi|[alpha/64, match- |mapping-sent||  [1] |
2925     |                |  |  |  |fe80::/64] mapping|            ||      |
2926     |IPv6 DevIID     |64|1 |Bi|         | ignore | DevIID     ||      |
2927     |IPv6 APPprefix  |64|1 |Bi|[beta/64,| match- |mapping-sent||  [2] |
2928     |                |  |  |  |alpha/64,| mapping|            ||      |
2929     |                |  |  |  |fe80::64]|        |            ||      |
2930     |IPv6 AppIID     |64|1 |Bi|::1000   | equal  | not-sent   ||      |
2931     +================+==+==+==+=========+========+============++======+
2932     |UDP DEVport     |16|1 |Bi|5683     | equal  | not-sent   ||      |
2933     |UDP APPport     |16|1 |Bi|5683     | equal  | not-sent   ||      |
2934     |UDP Length      |16|1 |Bi|         | ignore | comp-length||      |
2935     |UDP checksum    |16|1 |Bi|         | ignore | comp-chk   ||      |
2936     +================+==+==+==+=========+========+============++======+
2937
2938     Rule 2
2939     +----------------+--+--+--+---------+--------+------------++------+
2940     | Field          |FL|FP|DI| Value   | Match  | Action     || Sent |
2941     |                |  |  |  |         | Opera. | Action     ||[bits]|
2942     +----------------+--+--+--+---------+--------+------------++------+
2943     |IPv6 version    |4 |1 |Bi|6        | equal  | not-sent   ||      |
2944     |IPv6 DiffServ   |8 |1 |Bi|0        | equal  | not-sent   ||      |
2945     |IPv6 Flow Label |20|1 |Bi|0        | equal  | not-sent   ||      |
2946     |IPv6 Length     |16|1 |Bi|         | ignore | comp-length||      |
2947     |IPv6 Next Header|8 |1 |Bi|17       | equal  | not-sent   ||      |
2948     |IPv6 Hop Limit  |8 |1 |Up|255      | ignore | not-sent   ||      |
2949     |IPv6 Hop Limit  |8 |1 |Dw|         | ignore | value-sent ||  [8] |
2950     |IPv6 DEVprefix  |64|1 |Bi|alpha/64 | equal  | not-sent   ||      |
2951     |IPv6 DevIID     |64|1 |Bi|         | ignore | DevIID     ||      |
2952     |IPv6 APPprefix  |64|1 |Bi|gamma/64 | equal  | not-sent   ||      |
2953     |IPv6 AppIID     |64|1 |Bi|::1000   | equal  | not-sent   ||      |
2954     +================+==+==+==+=========+========+============++======+
2955     |UDP DEVport     |16|1 |Bi|8720     | MSB(12)| LSB        || [4]  |
2956     |UDP APPport     |16|1 |Bi|8720     | MSB(12)| LSB        || [4]  |
2957     |UDP Length      |16|1 |Bi|         | ignore | comp-length||      |
2958     |UDP checksum    |16|1 |Bi|         | ignore | comp-chk   ||      |
2959     +================+==+==+==+=========+========+============++======+
2960
2961
2962
2963                          Figure 29: Context Rules
2964
2973    All the fields described in the three Rules depicted on Figure 29 are
2974    present in the IPv6 and UDP headers.  The DevIID-DID value is found
2975    in the L2 header.
2976
2977    The second and third Rules use global addresses.  The way the Dev
2978    learns the prefix is not in the scope of the document.
2979
2980    The third Rule compresses port numbers to 4 bits.
2981
2982 Appendix B.  Fragmentation Examples
2983
2984    This section provides examples for the different fragment reliability
2985    modes specified in this document.
2986
2987    Figure 30 illustrates the transmission in No-ACK mode of an IPv6
2988    packet that needs 11 fragments.  FCN is 1 bit wide.
2989
2990            Sender               Receiver
2991              |-------FCN=0-------->|
2992              |-------FCN=0-------->|
2993              |-------FCN=0-------->|
2994              |-------FCN=0-------->|
2995              |-------FCN=0-------->|
2996              |-------FCN=0-------->|
2997              |-------FCN=0-------->|
2998              |-------FCN=0-------->|
2999              |-------FCN=0-------->|
3000              |-------FCN=0-------->|
3001              |-----FCN=1 + MIC --->|MIC checked: success =>
3002
3004     Figure 30: Transmission in No-ACK mode of an IPv6 packet carried by
3005                                11 fragments
3006
3007    In the following examples, N (i.e. the size if the FCN field) is 3
3008    bits.  Therefore, the All-1 FCN value is 7.
3009
3010    Figure 31 illustrates the transmission in ACK-on-Error of an IPv6
3011    packet that needs 11 fragments, with MAX_WIND_FCN=6 and no fragment
3012    loss.
3013
3029            Sender               Receiver
3030              |-----W=0, FCN=6----->|
3031              |-----W=0, FCN=5----->|
3032              |-----W=0, FCN=4----->|
3033              |-----W=0, FCN=3----->|
3034              |-----W=0, FCN=2----->|
3035              |-----W=0, FCN=1----->|
3036              |-----W=0, FCN=0----->|
3037          (no ACK)
3038              |-----W=1, FCN=6----->|
3039              |-----W=1, FCN=5----->|
3040              |-----W=1, FCN=4----->|
3041              |--W=1, FCN=7 + MIC-->|MIC checked: success =>
3042              |<---- ACK, W=1 ------|
3044
3045       Figure 31: Transmission in ACK-on-Error mode of an IPv6 packet
3046          carried by 11 fragments, with MAX_WIND_FCN=6 and no loss.
3047
3048    Figure 32 illustrates the transmission in ACK-on-Error mode of an
3049    IPv6 packet that needs 11 fragments, with MAX_WIND_FCN=6 and three
3050    lost fragments.
3051
3052             Sender             Receiver
3053              |-----W=0, FCN=6----->|
3054              |-----W=0, FCN=5----->|
3055              |-----W=0, FCN=4--X-->|
3056              |-----W=0, FCN=3----->|
3057              |-----W=0, FCN=2--X-->|             7
3058              |-----W=0, FCN=1----->|             /
3059              |-----W=0, FCN=0----->|       6543210
3060              |<-----ACK, W=0-------|Bitmap:1101011
3061              |-----W=0, FCN=4----->|
3062              |-----W=0, FCN=2----->|
3063          (no ACK)
3064              |-----W=1, FCN=6----->|
3065              |-----W=1, FCN=5----->|
3066              |-----W=1, FCN=4--X-->|
3067              |- W=1, FCN=7 + MIC ->|MIC checked: failed
3068              |<-----ACK, W=1-------|C=0 Bitmap:1100001
3069              |-----W=1, FCN=4----->|MIC checked: success =>
3070              |<---- ACK, W=1 ------|C=1, no Bitmap
3071
3073       Figure 32: Transmission in ACK-on-Error mode of an IPv6 packet
3074         carried by 11 fragments, with MAX_WIND_FCN=6 and three lost
3075                                 fragments.
3076
3085    Figure 33 illustrates the transmission in ACK-Always mode of an IPv6
3086    packet that needs 11 fragments, with MAX_WIND_FCN=6 and no loss.
3087
3088            Sender               Receiver
3089              |-----W=0, FCN=6----->|
3090              |-----W=0, FCN=5----->|
3091              |-----W=0, FCN=4----->|
3092              |-----W=0, FCN=3----->|
3093              |-----W=0, FCN=2----->|
3094              |-----W=0, FCN=1----->|
3095              |-----W=0, FCN=0----->|
3096              |<-----ACK, W=0-------| Bitmap:1111111
3097              |-----W=1, FCN=6----->|
3098              |-----W=1, FCN=5----->|
3099              |-----W=1, FCN=4----->|
3100              |--W=1, FCN=7 + MIC-->|MIC checked: success =>
3101              |<-----ACK, W=1-------| C=1 no Bitmap
3102            (End)
3103
3105    Figure 33: Transmission in ACK-Always mode of an IPv6 packet carried
3106         by 11 fragments, with MAX_WIND_FCN=6 and no lost fragment.
3107
3108    Figure 34 illustrates the transmission in ACK-Always mode of an IPv6
3109    packet that needs 11 fragments, with MAX_WIND_FCN=6 and three lost
3110    fragments.
3132
3141            Sender               Receiver
3142              |-----W=1, FCN=6----->|
3143              |-----W=1, FCN=5----->|
3144              |-----W=1, FCN=4--X-->|
3145              |-----W=1, FCN=3----->|
3146              |-----W=1, FCN=2--X-->|             7
3147              |-----W=1, FCN=1----->|             /
3148              |-----W=1, FCN=0----->|       6543210
3149              |<-----ACK, W=1-------|Bitmap:1101011
3150              |-----W=1, FCN=4----->|
3151              |-----W=1, FCN=2----->|
3152              |<-----ACK, W=1-------|Bitmap:
3153              |-----W=0, FCN=6----->|
3154              |-----W=0, FCN=5----->|
3155              |-----W=0, FCN=4--X-->|
3156              |--W=0, FCN=7 + MIC-->|MIC checked: failed
3157              |<-----ACK, W=0-------| C= 0 Bitmap:11000001
3158              |-----W=0, FCN=4----->|MIC checked: success =>
3159              |<-----ACK, W=0-------| C= 1 no Bitmap
3160            (End)
3162
3163    Figure 34: Transmission in ACK-Always mode of an IPv6 packet carried
3164       by 11 fragments, with MAX_WIND_FCN=6 and three lost fragments.
3165
3166    Figure 35 illustrates the transmission in ACK-Always mode of an IPv6
3167    packet that needs 6 fragments, with MAX_WIND_FCN=6, three lost
3168    fragments and only one retry needed to recover each lost fragment.
3169
3170              Sender                Receiver
3171                 |-----W=0, FCN=6----->|
3172                 |-----W=0, FCN=5----->|
3173                 |-----W=0, FCN=4--X-->|
3174                 |-----W=0, FCN=3--X-->|
3175                 |-----W=0, FCN=2--X-->|
3176                 |--W=0, FCN=7 + MIC-->|MIC checked: failed
3177                 |<-----ACK, W=0-------|C= 0 Bitmap:1100001
3178                 |-----W=0, FCN=4----->|MIC checked: failed
3179                 |-----W=0, FCN=3----->|MIC checked: failed
3180                 |-----W=0, FCN=2----->|MIC checked: success
3181                 |<-----ACK, W=0-------|C=1 no Bitmap
3182               (End)
3183
3184    Figure 35: Transmission in ACK-Always mode of an IPv6 packet carried
3185     by 11 fragments, with MAX_WIND_FCN=6, three lost framents and only
3186                  one retry needed for each lost fragment.
3187
3188
3197    Figure 36 illustrates the transmission in ACK-Always mode of an IPv6
3198    packet that needs 6 fragments, with MAX_WIND_FCN=6, three lost
3199    fragments, and the second ACK lost.
3200
3201              Sender                Receiver
3202                 |-----W=0, FCN=6----->|
3203                 |-----W=0, FCN=5----->|
3204                 |-----W=0, FCN=4--X-->|
3205                 |-----W=0, FCN=3--X-->|
3206                 |-----W=0, FCN=2--X-->|
3207                 |--W=0, FCN=7 + MIC-->|MIC checked: failed
3208                 |<-----ACK, W=0-------|C=0  Bitmap:1100001
3209                 |-----W=0, FCN=4----->|MIC checked: failed
3210                 |-----W=0, FCN=3----->|MIC checked: failed
3211                 |-----W=0, FCN=2----->|MIC checked: success
3212                 |  X---ACK, W=0-------|C= 1 no Bitmap
3213        timeout  |                     |
3214                 |--W=0, FCN=7 + MIC-->|
3215                 |<-----ACK, W=0-------|C= 1 no Bitmap
3216
3217               (End)
3218
3219    Figure 36: Transmission in ACK-Always mode of an IPv6 packet carried
3220     by 11 fragments, with MAX_WIND_FCN=6, three lost fragments, and the
3221                              second ACK lost.
3222
3223    Figure 37 illustrates the transmission in ACK-Always mode of an IPv6
3224    packet that needs 6 fragments, with MAX_WIND_FCN=6, with three lost
3225    fragments, and one retransmitted fragment lost again.
3226
3244
3253               Sender                Receiver
3254                 |-----W=0, FCN=6----->|
3255                 |-----W=0, FCN=5----->|
3256                 |-----W=0, FCN=4--X-->|
3257                 |-----W=0, FCN=3--X-->|
3258                 |-----W=0, FCN=2--X-->|
3259                 |--W=0, FCN=7 + MIC-->|MIC checked: failed
3260                 |<-----ACK, W=0-------|C=0 Bitmap:1100001
3261                 |-----W=0, FCN=4----->|MIC checked: failed
3262                 |-----W=0, FCN=3----->|MIC checked: failed
3263                 |-----W=0, FCN=2--X-->|
3264          timeout|                     |
3265                 |--W=0, FCN=7 + MIC-->|All-0 empty
3266                 |<-----ACK, W=0-------|C=0 Bitmap: 1111101
3267                 |-----W=0, FCN=2----->|MIC checked: success
3268                 |<-----ACK, W=0-------|C=1 no Bitmap
3269               (End)
3270
3271    Figure 37: Transmission in ACK-Always mode of an IPv6 packet carried
3272    by 11 fragments, with MAX_WIND_FCN=6, with three lost fragments, and
3273                   one retransmitted fragment lost again.
3274
3275    Figure 38 illustrates the transmission in ACK-Always mode of an IPv6
3276    packet that needs 28 fragments, with N=5, MAX_WIND_FCN=23 and two
3277    lost fragments.  Note that MAX_WIND_FCN=23 may be useful when the
3278    maximum possible Bitmap size, considering the maximum lower layer
3279    technology payload size and the value of R, is 3 bytes.  Note also
3280    that the FCN of the last fragment of the packet is the one with
3281    FCN=31 (i.e.  FCN=2^N-1 for N=5, or equivalently, all FCN bits set to
3282    1).
3283
3284
3285
3300
3309          Sender               Receiver
3310            |-----W=0, FCN=23----->|
3311            |-----W=0, FCN=22----->|
3312            |-----W=0, FCN=21--X-->|
3313            |-----W=0, FCN=20----->|
3314            |-----W=0, FCN=19----->|
3315            |-----W=0, FCN=18----->|
3316            |-----W=0, FCN=17----->|
3317            |-----W=0, FCN=16----->|
3318            |-----W=0, FCN=15----->|
3319            |-----W=0, FCN=14----->|
3320            |-----W=0, FCN=13----->|
3321            |-----W=0, FCN=12----->|
3322            |-----W=0, FCN=11----->|
3323            |-----W=0, FCN=10--X-->|
3324            |-----W=0, FCN=9 ----->|
3325            |-----W=0, FCN=8 ----->|
3326            |-----W=0, FCN=7 ----->|
3327            |-----W=0, FCN=6 ----->|
3328            |-----W=0, FCN=5 ----->|
3329            |-----W=0, FCN=4 ----->|
3330            |-----W=0, FCN=3 ----->|
3331            |-----W=0, FCN=2 ----->|
3332            |-----W=0, FCN=1 ----->|
3333            |-----W=0, FCN=0 ----->|
3334            |                      |lcl-Bitmap:110111111111101111111111
3335            |<------ACK, W=0-------|encoded Bitmap:1101111111111011
3336            |-----W=0, FCN=21----->|
3337            |-----W=0, FCN=10----->|
3338            |<------ACK, W=0-------|no Bitmap
3339            |-----W=1, FCN=23----->|
3340            |-----W=1, FCN=22----->|
3341            |-----W=1, FCN=21----->|
3342            |--W=1, FCN=31 + MIC-->|MIC checked: sucess =>
3343            |<------ACK, W=1-------|no Bitmap
3344          (End)
3345
3346    Figure 38: Transmission in ACK-Always mode of an IPv6 packet carried
3347     by 28 fragments, with N=5, MAX_WIND_FCN=23 and two lost fragments.
3348





























3349 Appendix C.  Fragmentation State Machines
3350
3351    The fragmentation state machines of the sender and the receiver, one
3352    for each of the different reliability modes, are described in the
3353    following figures:
3354
3355
3356
3365                 +===========+
3366    +------------+  Init     |
3367    |  FCN=0     +===========+
3368    |  No Window
3369    |  No Bitmap
3370    |                   +-------+
3371    |          +========+==+    | More Fragments
3372    |          |           | <--+ ~~~~~~~~~~~~~~~~~~~~
3373    +--------> |   Send    |      send Fragment (FCN=0)
3374               +===+=======+
3375                   |  last fragment
3376                   |  ~~~~~~~~~~~~
3377                   |  FCN = 1
3378                   v  send fragment+MIC
3379               +============+
3380               |    END     |
3381               +============+
3382
3383             Figure 39: Sender State Machine for the No-ACK Mode
3384
3385                          +------+ Not All-1
3386               +==========+=+    | ~~~~~~~~~~~~~~~~~~~
3387               |            + <--+ set Inactivity Timer
3388               |  RCV Frag  +-------+
3389               +=+===+======+       |All-1 &
3390       All-1 &   |   |              |MIC correct
3391     MIC wrong   |   |Inactivity    |
3392                 |   |Timer Exp.    |
3393                 v   |              |
3394      +==========++  |              v
3395      |   Error   |<-+     +========+==+
3396      +===========+        |    END    |
3397                           +===========+
3398
3399
3400            Figure 40: Receiver State Machine for the No-ACK Mode
3401
3402
3403
3404
3405
3406
3407
3408
3409
3410
3411
3412













3421                  +=======+
3422                  | INIT  |       FCN!=0 & more frags
3423                  |       |       ~~~~~~~~~~~~~~~~~~~~~~
3424                  +======++  +--+ send Window + frag(FCN)
3425                     W=0 |   |  | FCN-
3426      Clear local Bitmap |   |  v set local Bitmap
3427           FCN=max value |  ++==+========+
3428                         +> |            |
3429    +---------------------> |    SEND    |
3430    |                       +==+===+=====+
3431    |      FCN==0 & more frags |   | last frag
3432    |    ~~~~~~~~~~~~~~~~~~~~~ |   | ~~~~~~~~~~~~~~~
3433    |         set local-Bitmap |   | set local-Bitmap
3434    |   send wnd + frag(all-0) |   | send wnd+frag(all-1)+MIC
3435    |       set Retrans_Timer  |   | set Retrans_Timer
3436    |                          |   |
3437    |Recv_wnd == wnd &         |   |
3438    |Lcl_Bitmap==recv_Bitmap&  |   |  +----------------------+
3439    |more frag                 |   |  |lcl-Bitmap!=rcv-Bitmap|
3440    |~~~~~~~~~~~~~~~~~~~~~~    |   |  | ~~~~~~~~~            |
3441    |Stop Retrans_Timer        |   |  | Attemp++             v
3442    |clear local_Bitmap        v   v  |                +=====+=+
3443    |window=next_window   +====+===+==+===+            |Resend |
3444    +---------------------+               |            |Missing|
3445                     +----+     Wait      |            |Frag   |
3446    not expected wnd |    |    Bitmap     |            +=======+
3447    ~~~~~~~~~~~~~~~~ +--->+               ++Retrans_Timer Exp  |
3448        discard frag      +==+=+===+=+==+=+| ~~~~~~~~~~~~~~~~~ |
3449                             | |   | ^  ^  |reSend(empty)All-* |
3450                             | |   | |  |  |Set Retrans_Timer  |
3451                             | |   | |  +--+Attemp++           |
3452    MIC_bit==1 &             | |   | +-------------------------+
3453    Recv_window==window &    | |   |   all missing frags sent
3454                 no more frag| |   |   ~~~~~~~~~~~~~~~~~~~~~~
3455     ~~~~~~~~~~~~~~~~~~~~~~~~| |   |   Set Retrans_Timer
3456           Stop Retrans_Timer| |   |
3457     +=============+         | |   |
3458     |     END     +<--------+ |   |
3459     +=============+           |   | Attemp > MAX_ACK_REQUESTS
3460                All-1 Window & |   | ~~~~~~~~~~~~~~~~~~
3461                 MIC_bit ==0 & |   v Send Abort
3462       Lcl_Bitmap==recv_Bitmap | +=+===========+
3463                  ~~~~~~~~~~~~ +>|    ERROR    |
3464                    Send Abort   +=============+
3465
3466
3467
3468           Figure 41: Sender State Machine for the ACK-Always Mode





















3477     Not All- & w=expected +---+   +---+w = Not expected
3478     ~~~~~~~~~~~~~~~~~~~~~ |   |   |   |~~~~~~~~~~~~~~~~
3479     Set local_Bitmap(FCN) |   v   v   |discard
3480                          ++===+===+===+=+
3481    +---------------------+     Rcv      +--->* ABORT
3482    |  +------------------+   Window     |
3483    |  |                  +=====+==+=====+
3484    |  |       All-0 & w=expect |  ^ w =next & not-All
3485    |  |     ~~~~~~~~~~~~~~~~~~ |  |~~~~~~~~~~~~~~~~~~~~~
3486    |  |     set lcl_Bitmap(FCN)|  |expected = next window
3487    |  |      send local_Bitmap |  |Clear local_Bitmap
3488    |  |                        |  |
3489    |  | w=expct & not-All      |  |
3490    |  | ~~~~~~~~~~~~~~~~~~     |  |
3491    |  | set lcl_Bitmap(FCN)+-+ |  | +--+ w=next & All-0
3492    |  | if lcl_Bitmap full | | |  | |  | ~~~~~~~~~~~~~~~
3493    |  | send lcl_Bitmap    | | |  | |  | expct = nxt wnd
3494    |  |                    v | v  | |  | Clear lcl_Bitmap
3495    |  |  w=expct & All-1 +=+=+=+==+=++ | set lcl_Bitmap(FCN)
3496    |  |  ~~~~~~~~~~~  +->+    Wait   +<+ send lcl_Bitmap
3497    |  |    discard    +--|    Next   |
3498    |  | All-0  +---------+  Window   +--->* ABORT
3499    |  | ~~~~~  +-------->+========+=++
3500    |  | snd lcl_bm  All-1 & w=next| |  All-1 & w=nxt
3501    |  |                & MIC wrong| |  & MIC right
3502    |  |          ~~~~~~~~~~~~~~~~~| | ~~~~~~~~~~~~~~~~~~
3503    |  |      set local_Bitmap(FCN)| |set lcl_Bitmap(FCN)
3504    |  |          send local_Bitmap| |send local_Bitmap
3505    |  |                           | +----------------------+
3506    |  |All-1 & w=expct            |                        |
3507    |  |& MIC wrong                v   +---+ w=expctd &     |
3508    |  |~~~~~~~~~~~~~~~~~~~~  +====+=====+ | MIC wrong      |
3509    |  |set local_Bitmap(FCN) |          +<+ ~~~~~~~~~~~~~~ |
3510    |  |send local_Bitmap     | Wait End | set lcl_btmp(FCN)|
3511    |  +--------------------->+          +--->* ABORT       |
3512    |                         +===+====+=+-+ All-1&MIC wrong|
3513    |                             |    ^   | ~~~~~~~~~~~~~~~|
3514    |      w=expected & MIC right |    +---+ send lcl_btmp  |
3515    |      ~~~~~~~~~~~~~~~~~~~~~~ |                         |
3516    |       set local_Bitmap(FCN) | +-+ Not All-1           |
3517    |        send local_Bitmap    | | | ~~~~~~~~~           |
3518    |                             | | |  discard            |
3519    |All-1 & w=expctd & MIC right | | |                     |
3520    |~~~~~~~~~~~~~~~~~~~~~~~~~~~~ v | v +----+All-1         |
3521    |set local_Bitmap(FCN)      +=+=+=+=+==+ |~~~~~~~~~     |
3522    |send local_Bitmap          |          +<+Send lcl_btmp |
3523    +-------------------------->+    END   |                |
3524                                +==========+<---------------+
3533           --->* ABORT
3534                ~~~~~~~
3535                Inactivity_Timer = expires
3536            When DWN_Link
3537              IF Inactivity_Timer expires
3538                 Send DWL Request
3539                 Attemp++
3540
3541
3542          Figure 42: Receiver State Machine for the ACK-Always Mode
3543
3544
3545
3546
3547
3548
3549
3550
3551
3552
3553
3580
3589                       +=======+
3590                       |       |
3591                       | INIT  |
3592                       |       |        FCN!=0 & more frags
3593                       +======++  +--+  ~~~~~~~~~~~~~~~~~~~~~~
3594                          W=0 |   |  |  send Window + frag(FCN)
3595           ~~~~~~~~~~~~~~~~~~ |   |  |  FCN-
3596           Clear local Bitmap |   |  v  set local Bitmap
3597                FCN=max value |  ++=============+
3598                              +> |              |
3599                                 |     SEND     |
3600     +-------------------------> |              |
3601     |                           ++=====+=======+
3602     |         FCN==0 & more frags|     |last frag
3603     |     ~~~~~~~~~~~~~~~~~~~~~~~|     |~~~~~~~~~~~~~~~~~
3604     |            set local-Bitmap|     |set local-Bitmap
3605     |      send wnd + frag(all-0)|     |send wnd+frag(all-1)+MIC
3606     |           set Retrans_Timer|     |set Retrans_Timer
3607     |                            |     |
3608     |Retrans_Timer expires &     |     |   lcl-Bitmap!=rcv-Bitmap
3609     |more fragments              |     |   ~~~~~~~~~~~~~~~~~~~~~~
3610     |~~~~~~~~~~~~~~~~~~~~        |     |   Attemp++
3611     |stop Retrans_Timer          |     |  +-----------------+
3612     |clear local-Bitmap          v     v  |                 v
3613     |window = next window  +=====+=====+==+==+         +====+====+
3614     +----------------------+                 +         | Resend  |
3615     +--------------------->+    Wait Bitmap  |         | Missing |
3616     |                  +-- +                 |         | Frag    |
3617     | not expected wnd |   ++=+===+===+===+==+         +======+==+
3618     | ~~~~~~~~~~~~~~~~ |    ^ |   |   |   ^                   |
3619     |    discard frag  +----+ |   |   |   +-------------------+
3620     |                         |   |   |     all missing frag sent
3621     |Retrans_Timer expires &  |   |   |     ~~~~~~~~~~~~~~~~~~~~~
3622     |       No more Frag      |   |   |     Set Retrans_Timer
3623     | ~~~~~~~~~~~~~~~~~~~~~~~ |   |   |
3624     |  Stop Retrans_Timer     |   |   |
3625     |  Send ALL-1-empty       |   |   |
3626     +-------------------------+   |   |
3627                                   |   |
3628          Local_Bitmap==Recv_Bitmap|   |
3629          ~~~~~~~~~~~~~~~~~~~~~~~~~|   |Attemp > MAX_ACK_REQUESTS
3630     +=========+Stop Retrans_Timer |   |~~~~~~~~~~~~~~~~~~~~~~~
3631     |   END   +<------------------+   v  Send Abort
3632     +=========+                     +=+=========+
3633                                     |   ERROR   |
3634                                     +===========+
3635
3636          Figure 43: Sender State Machine for the ACK-on-Error Mode




















3645       Not All- & w=expected +---+   +---+w = Not expected
3646       ~~~~~~~~~~~~~~~~~~~~~ |   |   |   |~~~~~~~~~~~~~~~~
3647       Set local_Bitmap(FCN) |   v   v   |discard
3648                            ++===+===+===+=+
3649    +-----------------------+              +--+ All-0 & full
3650    |            ABORT *<---+  Rcv Window  |  | ~~~~~~~~~~~~
3651    |  +--------------------+              +<-+ w =next
3652    |  |     All-0 empty +->+=+=+===+======+ clear lcl_Bitmap
3653    |  |     ~~~~~~~~~~~ |    | |   ^
3654    |  |     send bitmap +----+ |   |w=expct & not-All & full
3655    |  |                        |   |~~~~~~~~~~~~~~~~~~~~~~~~
3656    |  |                        |   |set lcl_Bitmap; w =nxt
3657    |  |                        |   |
3658    |  |      All-0 & w=expect  |   |     w=next
3659    |  |      & no_full Bitmap  |   |    ~~~~~~~~  +========+
3660    |  |      ~~~~~~~~~~~~~~~~~ |   |    Send abort| Error/ |
3661    |  |      send local_Bitmap |   |  +---------->+ Abort  |
3662    |  |                        |   |  | +-------->+========+
3663    |  |                        v   |  | |   all-1       ^
3664    |  |    All-0 empty    +====+===+==+=+=+ ~~~~~~~     |
3665    |  |  ~~~~~~~~~~~~~ +--+    Wait       | Send abort  |
3666    |  |  send lcl_btmp +->| Missing Fragm.|             |
3667    |  |                   +==============++             |
3668    |  |                                  +--------------+
3669    |  |                                   Uplink Only &
3670    |  |                             Inactivity_Timer = expires
3671    |  |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~
3672    |  |                              Send Abort
3673    |  |All-1 & w=expect & MIC wrong
3674    |  |~~~~~~~~~~~~~~~~~~~~~~~~~~~~      +-+  All-1
3675    |  |set local_Bitmap(FCN)             | v  ~~~~~~~~~~
3676    |  |send local_Bitmap     +===========+==+ snd lcl_btmp
3677    |  +--------------------->+   Wait End   +-+
3678    |                         +=====+=+====+=+ | w=expct &
3679    |       w=expected & MIC right  | |    ^   | MIC wrong
3680    |       ~~~~~~~~~~~~~~~~~~~~~~  | |    +---+ ~~~~~~~~~
3681    |  set & send local_Bitmap(FCN) | | set lcl_Bitmap(FCN)
3682    |                               | |
3683    |All-1 & w=expected & MIC right | +-->* ABORT
3684    |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ v
3685    |set & send local_Bitmap(FCN) +=+==========+
3686    +---------------------------->+     END    |
3687                                  +============+
3688                --->* ABORT
3689                     Only Uplink
3690                     Inactivity_Timer = expires
3691                     ~~~~~~~~~~~~~~~~~~~~~~~~~~
3692                     Send Abort
3701         Figure 44: Receiver State Machine for the ACK-on-Error Mode
3702
3703 Appendix D.  SCHC Parameters - Ticket #15
3704
3705    This section gives the list of parameters that need to be defined in
3706    the technology-specific documents.
3707
3708    o  Define the most common uses case and how SCHC may be deployed.
3709
3710    o  LPWAN Architecture.  Explain the SCHC entities (Compression and
3711       Fragmentation), how/where they are represented in the
3712       corresponding technology architecture.  If applicable, explain the
3713       various potential channel conditions for the technology and the
3714       corresponding recommended use of C/D and F/R.
3715
3716    o  L2 fragmentation decision
3717
3718    o  Technology developers must evaluate that L2 has strong enough
3719       integrity checking to match SCHC's assumption.
3720
3721    o  Rule ID numbering system, number of Rules
3722
3723    o  Size of the Rule IDs
3724
3725    o  The way the Rule ID is sent (L2 or L3) and how (describe)
3726
3727    o  Fragmentation delivery reliability mode used in which cases (e.g.
3728       based on link channel condition)
3729
3730    o  Define the number of bits for FCN (N) and DTag (T)
3731
3732    o  in particular, is interleaved packet transmission supported and to
3733       what extent
3734
3735    o  The MIC algorithm to be used and the size, if different from the
3736       default CRC32
3737
3738    o  Retransmission Timer duration
3739
3740    o  Inactivity Timer duration
3741
3742    o  Define MAX_ACK_REQUEST (number of attempts)
3743
3744    o  Padding: size of the L2 Word (for most technologies, a byte; for
3745       some technologies, a bit).  Value of the padding bits (1 or 0).
3746       The value of the padding bits needs to be specified because the
3747       padding bits are included in the MIC calculation.
3748
3757    o  Take into account that the length of Rule ID + N + T + W when
3758       possible is good to have a multiple of 8 bits to complete a byte
3759       and avoid padding
3760
3761    o  In the ACK format to have a length for Rule ID + T + W bit into a
3762       complete number of byte to do optimization more easily
3763
3764    o  The technology documents will describe if Rule ID is constrained
3765       by any alignment
3766
3767    o  When fragmenting in ACK-on-Error or ACK-Always mode, it is
3768       expected that the last window (called All-1 window) will not be
3769       fully utilised, i.e. there won't be fragments with all FCN values
3770       from MAX_WIND_FCN downto 1 and finally All-1.  It is worth noting
3771       that this document does not mandate that other windows (called
3772       All-0 windows) are fully utilised either.  This document purposely
3773       does not specify that All-1 windows use Bitmaps with the same
3774       number of bits as All-0 windows do.  By default, Bitmaps for All-0
3775       and All-1 windows are of the same size MAX_WIND_FCN + 1.  But a
3776       technology-specific document MAY revert that decision.  The
3777       rationale for reverting the decision could be the following: Note
3778       that the SCHC ACK sent as a response to an All-1 fragment includes
3779       a C bit that SCHC ACK for other windows don't have.  Therefore,
3780       the SCHC ACK for the All-1 window is one bit bigger.  An L2
3781       technology with a severely constrained payload size might decide
3782       that this "bump" in the SCHC ACK for the last fragment is a bad
3783       resource usage.  It could thus mandate that the All-1 window is
3784       not allowed to use the FCN value 1 and that the All-1 SCHC ACK
3785       Bitmap size is reduced by 1 bit.  This provides room for the C bit
3786       without creating a bump in the SCHC ACK.
3787
3788    And the following parameters need to be addressed in another document
3789    but not forcely in the technology-specific one:
3790
3791    o  The way the contexts are provisioning
3792
3793    o  The way the Rules as generated
3794
3795 Appendix E.  Note
3796
3797    Carles Gomez has been funded in part by the Spanish Government
3798    (Ministerio de Educacion, Cultura y Deporte) through the Jose
3799    Castillejo grant CAS15/00336, and by the ERDF and the Spanish
3800    Government through project TEC2016-79988-P.  Part of his contribution
3801    to this work has been carried out during his stay as a visiting
3802    scholar at the Computer Laboratory of the University of Cambridge.
3803
3804
3805
3806
3807
3808 Minaburo, et al.        Expires December 31, 2018              [Page 68]
3809
3810 Internet-Draft                 LPWAN SCHC                      June 2018
3811
3812
3813 Authors' Addresses
3814
3815    Ana Minaburo
3816    Acklio
3817    1137A avenue des Champs Blancs
3818    35510 Cesson-Sevigne Cedex
3819    France
3820
3821    Email: ana@ackl.io
3822
3823
3824    Laurent Toutain
3825    IMT-Atlantique
3826    2 rue de la Chataigneraie
3827    CS 17607
3828    35576 Cesson-Sevigne Cedex
3829    France
3830
3831    Email: Laurent.Toutain@imt-atlantique.fr
3832
3833
3834    Carles Gomez
3835    Universitat Politecnica de Catalunya
3836    C/Esteve Terradas, 7
3837    08860 Castelldefels
3838    Spain
3839
3840    Email: carlesgo@entel.upc.edu
3841
3842
3843    Dominique Barthel
3844    Orange Labs
3845    28 chemin du Vieux Chene
3846    38243 Meylan
3847    France
3848
3849    Email: dominique.barthel@orange.com
3850
3851
3852
3853
3854
3855
3856
3857
3858
3859
3860
3861
3862
3863
3864 Minaburo, et al.        Expires December 31, 2018              [Page 69]
