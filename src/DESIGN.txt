This is the first iteration of the design.
After initial implementation drafting, there are the following issues:
- rules could be per device on gateway(app) side (not so much on device side ?)
- what to do if several fragmentation rules apply? rule "matching" is TBD

===========================================================================
 Rule database design
---------------------------------------------------------------------------

In this implementation, the rule actions are stored as 'bytecode',
a set of bytes  independent from their representation.

The reason is that implementation targets primarily embedded systems (as opposed
to server side), and the rationale are as follow:
- 1) We want to able to modify rules at run-time. If rules were supposed to be
  fixed at compile time, a C-data structure (or C code generator) could be used.
- 2) a lot of optimizations may be performed with the rule set is larger,
  but these require complex algorithms, best implemented in a rule compiler
  (and with higher abstraction level language such as Python), not in the
  embedded systems.
  Of course, optimizations will change bytecode (hence bytecode is
  implementation/optimization/version dependent) - ideally by only adding
  supplemental information.

---------------------------------------------------------------------------

The basic non-optimized bytecode is as follows:
- the namespace of the Rule-ID is a flat namespace (both compression and
  fragmentation)
- each rule is associated with a context as in SSCH (Soichi's SCHC) [2].
  In the non-optimized version, the context is unique and MUST have ID=0

--- Bytecode format of the SCHIC v0+:
(a future optimizing version with options etc. would rather use CBOR for
 meta-information, and maybe keep base CDA action as bytecode).

-- SCHIC header:
<magic (4)>     "CHIC" (as ASCII bytes)
<version (4)>   0x00000000 (non-optimized dev version)

-- Context (unique):
<context_id (1)>        0x01
<rule_id_bitsize (1)>   (size in bits of the rule ID), maximum 32 bits
<default_rule_id (1)>   (not used, comes from SSCHC)
<mic_type (1)>          (SCHIC_MIC_TYPE_...)

-- Rules:
<number of fragmentation rules (4)> (=N)
<number of compression rules (4)>   (=M)

-- Fragmentation rule x N:
<rule_id (4)>                  (should not exceed rule ID bitsize)
<ack_mode (1)>            (NO-ACK, ...)
<dtag_bitsize (1)>             (maximum 32 [bits])
<fcn_bitsize (1)>              (maximum 32 [bits])
<default_dtag (4)>             (lower size then dtag_bitsize)

-- Compression rule x M:
<rule id (4)>                  (should not exceed rule ID bitsize)
<rule nb action(1)>            (number of actions)
<rule bytecode position (4)>   (position of 1st action bytecode in bytes)
<rule bytecode size (4)>       (size in bytes) XXX: fix, use nb action

-- Rule CDA action bytecode:
<field_id_namespace (1)>          (one of the SCHIC_FID_SPACE_...)
<field_id (1)>                    (the Field ID FID)
<field_position (1)>           (Field Position (FP))
<dir_indicator (1)>               (Up, Dw, Bi)
<matching operator (1)>
<action (1)>                      (one of the CDA_...)
<rule bytecode data position (4)> (position of 1st byte data in bytes)
<rule bytecode data size (4)>     (size in bytes)

===========================================================================

libschic format (SCHIC_ + uppercase/underscore of what is written in draft)

exception: NO_ACK -> SCHIC_ACK_NO_ACK
[...]

----- Context (libschic vs SSCHC):

context_id      | CID
rule_id_bitsize | RID_SIZE
default_rule_id | DEFAULT_RID
mic_type        | MIC_FUNC    | [MIC_TYPE_CRC32:CRC32]

----- Fragment rule (libschic vs SSCHC):

rule_id      | RID
dtag_bitsize | DTAG_SIZE
fcn_bitsize  | FCN_SIZE
default_dtag | DEFAULT_DTAG
ack_mode     | MODE         | [
    ACK_NO_ACK : NO-ACK,
    ACK_ALWAYS : ACK-ALWAYS,
  ACK_ON_ERROR : ACK-ON-ERROR ]

----- Compression rule (libschic vs SSCHC)

field_id          | FID | [
  FID_IPv6_version                    : IPV6.VER,
  FID_IPv6_Traffic_class              : IPV6.TC,
  FID_IPv6_Flow_label                 : IPV6.FL,
  FID_IPv6_Payload_Length             : IPV6.LEN,
  FID_IPv6_Next_Header                : IPV6.NXT,
  FID_IPv6_Hop_Limit                  : IPV6.HOP_LMT,
  FID_IPv6_Source_Address_Prefix      : IPV6.DEV_PREFIX,
  FID_IPv6_Source_Address_IID         : IPV6.DEV_IID,
  FID_IPv6_Destination_Address_Prefix : IPV6.APP_PREFIX,
  FID_IPv6_Destination_Address_IID    : IPV6.APP_IID,

  FID_IPv6_UDP_Source_Port            : UDP.APP_SPORT,
  FID_IPv6_UDP_Destination_Port       : UDP.APP_PORT,
  FID_IPv6_UDP_Length                 : UDP.LEN,
  FID_IPv6_UDP_Checksum               : UDP.CKSUM
]

field_bitsize     | FL
field_position    | FP
dir_indicator     | DI | [ DI_UP:UP, DI_DW:DW, DI_BI:BI ]

matching_operator | MO | [
  MO_EQUAL         : EQUAL,
  MO_IGNORE        : IGNORE,
  MO_MATCH_MAPPING : MATCH-mapping
]

action            | CDA | [
    CDA_NOT_SENT         : NOT-SENT,
    CDA_VALUE_SENT       : VALUE-SENT,
    CDA_MAPPING_SENT     : MAPPING-SENT,
    CDA_LSB              : LSB,
    CDA_COMPUTE_LENGTH   : COMP_LENGTH,
    CDA_COMPUTE_CHECKSUM : COMP_CHK,
    CDA_DEVIID           : DEVIID,
    CDA_APPIID           : APPIID
]

---------------------------------------------------------------------------

Format from classic-SCHC:

[...]

===========================================================================

[1] classic-SCHC: (by L. Toutain, P. Clavier and many others.)
   https://github.com/ltn22/SCHC
[2] SSCHC: Soichi's SCHC implementation in Python,
    http://github.com/tanupoo/schc-test
[3] Jose's SCHC:
    https://github.com/jia200x/lpwan-ipv6-schc

---------------------------------------------------------------------------
